---
title: Mini Project 4
format: html
css: styles.css
---

CUNY Retirement Plans

# Introduction


## Task 00: Install Packages and Libraries
```{r install-packages_[1], echo=TRUE, message=FALSE, warning=FALSE}
if (!require("data.table")) install.packages("data.table")
if (!require("dotenv")) install.packages("dotenv")
if (!require("dplyr")) install.packages("dplyr")
if (!require("DT")) install.packages("DT")
if (!require("glue")) install.packages("glue")
if (!require("httr2")) install.packages("httr2")
if (!require("plotly")) install.packages("plotly")
if (!require("scales")) install.packages("scales")
if (!require("tidyr")) install.packages("tidyr")
if (!require("tidyverse")) install.packages("tidyverse")
if (!require("tools")) install.packages("tools")

library(data.table)
library(dotenv)
library(dplyr)
library(DT)
library(glue)
library(httr2)
library(plotly)
library(scales)
library(tidyr)
library(tidyverse)
library(tools)
```

```{r its-a-secret-to-everybody_[2], echo=FALSE, message=TRUE, warning=FALSE}
# API Keys are stored in a .secret file
# this line of code is view-able in GitHub but not on the project itself
# for somewhat obvious reasons
dotenv::load_dot_env(".secrets")
```

## Task 01: Register for AlphaVantage API Key
```{r alpha-key_[3], echo=TRUE, message=FALSE, warning=FALSE}
# Key has been registeted previously
alpha_api_key <- Sys.getenv("ALPHA_API_KEY")
```

## Task 02: Register for FRED API Key
```{r fred-key_[4], echo=TRUE, message=FALSE, warning=FALSE}
# Key has been registeted previously
fred_api_key <- Sys.getenv("FRED_API_KEY")
```


## Task 03: Data Acquisition

Pulling in data on:

* Inflation
  - FRED
* Wage Growth
  - FRED
* US Equity Market total returns
  - AlphaVantage
* International Equity Market total returns
  - AlphaVantage
* Bond market total returns
  - FRED
* Short-term debt returns
  - FRED


```{r fred-function_[5], echo=TRUE, message=FALSE, warning=FALSE}
#| code-fold: TRUE
# Creating a request and clean function for FRED Data
series_url = "https://api.stlouisfed.org/fred/series/observations?series_id="

get_fred_data <- function(url,series_id,api_key){
  
  lookup_url <- paste0(url,series_id,"&api_key=",api_key,"&file_type=json")
  
  req <- request(lookup_url)
  
  resp <- req_perform(req)
  
  data <- resp_body_json(resp)
  
  df <- data$observations
  
  return(df)
}
```






```{r alpha-function_[6], echo=TRUE, message=FALSE, warning=FALSE}
#| code-fold: TRUE
# Creating a similar function for Alpha Data

base_alpha_url <- "https://www.alphavantage.co/query"

get_alpha_data <- function(url,lookup_symbol,api_key){
  req <- request(url) |>
    req_url_query(
      `function` = "TIME_SERIES_DAILY",
      symbol=lookup_symbol,
      interval = "60min",
      apikey = alpha_api_key,
      outputsize = "full"
    )
  
  resp <- req_perform(req)
  
  data <- resp_body_json(resp)
  
  time_series <- data$`Time Series (Daily)`
  
  # Convert to dataframe
  df <- do.call(rbind, lapply(time_series, function(row) {
    as.data.frame(t(row), stringsAsFactors = FALSE)
  }))
  
  df$Date <- rownames(time_series)
  
  df <- rownames_to_column(df, var = "Date")
  
  # Remove the row names
  rownames(df) <- NULL
  
  # Ensure the Date column is in Date format
  df$Date <- as.Date(df$Date)
  
  df <- df |>
    rename(`open` = `1. open`,
           `high` = `2. high`,
           `low` = `3. low`,
           `close` = `4. close`,
           `volume` = `5. volume`)
  
  df <- df |>
    mutate(
      open = as.numeric(open),
      high = as.numeric(high),
      low = as.numeric(low),
      close = as.numeric(close),
      volume = as.numeric(volume)
    )
  
  # Create YearMonth column and calculate medians
  medians <- df |>
    mutate(YearMonth = format(Date, "%Y-%m")) |>
    group_by(YearMonth) |>
    summarize(across(
      c(open, high, low, close, volume),
      median,
      na.rm = TRUE
    )) |>
    ungroup()
  
  return(medians)
  }

```

### 3a. Inflation Data

```{r inflation-data_[7], echo=TRUE, message=FALSE, warning=FALSE}
#| code-fold: TRUE
# Pulling this data from the FRED website
# If you look up the series ID in FRED, you can directly access the data and download its .CSV file there

inflation_series_id = "FPCPITOTLZGUSA"

inflation_df <- get_fred_data(url=series_url,series_id=inflation_series_id,api_key=fred_api_key)

clean_inflation_df <- data.frame(
  DATE = sapply(inflation_df, function(x) x$date),
  inflation_rate = as.numeric(sapply(inflation_df, function(x) x$value))
)

clean_inflation_df <- clean_inflation_df |>
  mutate(year = substr(DATE,start=0,stop=4),
         inflation_rate = round(inflation_rate,3),
         yoy_diff = round(inflation_rate - lag(inflation_rate),2),
         yoy_diff = if_else(is.na(yoy_diff), 0, yoy_diff)
         ) |>
  select(`Year` = year,
         `Inflation Rate` = inflation_rate,
         `YoY Differential` = yoy_diff)

clean_inflation_df |>
  DT::datatable()

print(glue("The Inflation Dataset covers a year range of {min(clean_inflation_df$Year)} to {max(clean_inflation_df$Year)}"))
```


### 3b. Wage Data

Note: This data spans from January 1983 through October 2024. However, there are two date ranges where there is no recorded data: July 1985 - September 1986 (14 months) and June 1995 - August 1996 (14 months). This is "[...due to changes in methodology.](https://fred.stlouisfed.org/series/FRBATLWGTUMHWG83O)"

```{r wage-data_[8], echo=TRUE, message=FALSE, warning=FALSE}
#| code-fold: TRUE
wage_series_id = "FRBATLWGTUMHWG83O"

wage_df <- get_fred_data(url=series_url,series_id=wage_series_id,api_key=fred_api_key)

clean_wage_df <- data.frame(
  DATE = sapply(wage_df, function(x) x$date),
  wage_growth = as.numeric(sapply(wage_df, function(x) x$value))
)


clean_wage_df <- clean_wage_df |>
  mutate(year = substr(DATE,start=0,stop=4)) |>
  group_by(year) |>
  summarize(
    mwg = round(median(wage_growth, na.rm = TRUE), 1),
    null_months = sum(is.na(wage_growth)) # Count of NULL months
  ) |>
  ungroup() |>
  mutate(yoy_diff = round(mwg - lag(mwg),2),
         yoy_diff = if_else(is.na(yoy_diff), 0, yoy_diff)) |>
  select(
    `Year`= year,
    `NULL Month Count` = null_months,
    `Median Wage Growth` = mwg,
    `YoY Differential` = yoy_diff
  )

clean_wage_df |>
  DT::datatable()

print(glue("The Wage Dataset covers a year range of {min(clean_wage_df$Year)} to {max(clean_wage_df$Year)}"))
```

### 3c. U.S. Equity Market Total Returns (Lookup Symbol = SPY)

```{r us-market-data_[9], echo=TRUE, message=FALSE, warning=FALSE}
#| code-fold: TRUE
us_monthly_medians <- get_alpha_data(url=base_alpha_url,lookup_symbol="SPY",api_key=alpha_api_key)

us_monthly_medians <- us_monthly_medians |>
  mutate(
    year = substr(YearMonth,start=0,stop=4)
  ) |>
  group_by(year) |>
  summarize(across(
    c(open, high, low, close, volume),
    median,
    na.rm = TRUE
  )) |>
  ungroup() |>
  mutate(
    open = round(open,2),
    high = round(high, 2),
    low = round(low, 2),
    close = round(close, 2),
    high_low_diff = round(high - low, 2),
    open_close_diff = round(open - close, 2),
    yoy_diff = round(volume - lag(volume),2),
    yoy_diff = if_else(is.na(yoy_diff), 0, yoy_diff)
  ) |>
  select(
    `Year` = year,
    `Open` = open,
    `Close` = close,
    `High` = high,
    `Low` = low,
    `Traded Volume` = volume,
    `YoY Volume Difference` = yoy_diff
  )

us_monthly_medians |>
  DT::datatable()

print(glue("The US Equity Market Dataset covers a year range of {min(us_monthly_medians$Year)} to {max(us_monthly_medians$Year)}"))
```

### 3d. International Equity Market Total Returns (Lookup Symbol = VXUS)
```{r international-market-data_[10], echo=TRUE, message=FALSE, warning=FALSE}
#| code-fold: TRUE
intl_monthly_medians <- get_alpha_data(url=base_alpha_url,lookup_symbol="VXUS",api_key=alpha_api_key)

intl_monthly_medians <- intl_monthly_medians |>
  mutate(
    year = substr(YearMonth,start=0,stop=4)
  ) |>
  group_by(year) |>
  summarize(across(
    c(open, high, low, close, volume),
    median,
    na.rm = TRUE
  )) |>
  ungroup() |>
  mutate(
    open = round(open,2),
    high = round(high, 2),
    low = round(low, 2),
    close = round(close, 2),
    high_low_diff = round(high - low, 2),
    open_close_diff = round(open - close, 2),
    yoy_diff = round(volume - lag(volume),2),
    yoy_diff = if_else(is.na(yoy_diff), 0, yoy_diff)
  ) |>
  select(
    `Year` = year,
    `Open` = open,
    `Close` = close,
    `High` = high,
    `Low` = low,
    `Traded Volume` = volume,
    `YoY Volume Difference` = yoy_diff
  )

intl_monthly_medians |>
  DT::datatable()

print(glue("The International Equity Market Dataset covers a year range of {min(intl_monthly_medians$Year)} to {max(intl_monthly_medians$Year)}"))
```

### 3e. Bond Returns

```{r bond-returns_[11], echo=TRUE, message=FALSE, warning=FALSE}
#| code-fold: TRUE
bond_series_id = "BAMLCC0A4BBBTRIV"

bond_df <- get_fred_data(url=series_url,series_id=bond_series_id,api_key=fred_api_key)

clean_bond_df <- data.frame(
  DATE = sapply(bond_df, function(x) x$date),
  bond = as.numeric(sapply(bond_df, function(x) x$value))
)

clean_bond_df <- clean_bond_df |>
  mutate(year = substr(DATE,start=0,stop=4)) |>
  group_by(year) |>
  summarize(
    median_bond_price = median(bond, na.rm = TRUE)
  ) |>
  ungroup() |>
  mutate(yoy_diff = round(median_bond_price - lag(median_bond_price),2),
         yoy_diff = if_else(is.na(yoy_diff), 0, yoy_diff)) |>
  select(
    `Year`= year,
    `Median Bond Price` = median_bond_price,
    `YoY Differential` = yoy_diff
  )

clean_bond_df |>
  DT::datatable()

print(glue("The Bond Dataset covers a year range of {min(clean_bond_df$Year)} to {max(clean_bond_df$Year)}"))
```


### 3f. Short-Term Debt Returns

```{r short-term-debt_[12], echo=TRUE, message=FALSE, warning=FALSE}
#| code-fold: TRUE
short_term_debt_series_id = "QFRD304INFUSNO"

short_term_debt_df <- get_fred_data(url=series_url,series_id=short_term_debt_series_id,api_key=fred_api_key)

clean_short_term_debt_df <- data.frame(
  DATE = sapply(short_term_debt_df, function(x) x$date),
  quarterly_financials = as.numeric(sapply(short_term_debt_df, function(x) x$value))
)

clean_short_term_debt_df <- clean_short_term_debt_df |>
  mutate(year = substr(DATE,start=0,stop=4)) |>
  group_by(year) |>
  summarize(
    annual_financials = round(median(quarterly_financials, na.rm = TRUE), 1)
  ) |>
  mutate(yoy_diff = round(annual_financials - lag(annual_financials),2),
         yoy_diff = if_else(is.na(yoy_diff), 0, yoy_diff)) |>
  ungroup() |>
  select(
    `Year` = year,
    `Annual Financials` = annual_financials,
    `YoY Differential` = yoy_diff
  )

clean_short_term_debt_df |>
  DT::datatable()

print(glue("The Short-Term Debt Dataset covers a year range of {min(clean_short_term_debt_df$Year)} to {max(clean_short_term_debt_df$Year)}"))
```


## Task 04: Initial Analysis
There are now 6 datasets to look into.

The first step is to do some EDA. We could look at the data as a whole or compare like-to-like.

This divides our data into three groups: Inflation + Wages, US + International Markets, and Bond + Short-Term Debt.

There are two reasons for this: the first is these compare similar indicators to each other. The second is the date ranges are different across the board, so throwing everything into a single table and graph would just look messy.

First up, let's look at how both Inflation and Wages have changed over the years. The first graph compares the Rate of Inflation to the Median Wage Growth per year. The second shows the Year-over-year differential between 

```{r inflation-and-wages_[13], echo=TRUE, message=FALSE, warning=FALSE}
#| code-fold: TRUE
# dropping NULL month count from wages since it won't really apply to any further analysis
wgs <- clean_wage_df |>
  select(
    -`NULL Month Count`
  )

# join dfs on year, this will shorten the overall date range to 1983-2023 (40 year span)
infl_wgs_df <- clean_inflation_df |>
  inner_join(wgs, by = "Year") |>
  select(
    `Year`,
    `Inflation Rate`,
    `YoY Inflation Differential` = `YoY Differential.x`,
    `Median Wage Growth`,
    `YoY Wages Differential` = `YoY Differential.y`
  ) |>
  mutate(
    `YoY Inflation Differential` = if_else(
      Year == 1983, 0, `YoY Inflation Differential` # Since it's cutting off a portion of the inflation dataset...
    )
  )

# quick look at the table
infl_wgs_df |>
  DT::datatable()
```

```{r infl-wgs-lineplot_[14], echo=TRUE, message=FALSE, warning=FALSE}
#| code-fold: TRUE
# Ensure Year is numeric
infl_wgs_df$Year <- as.numeric(as.character(infl_wgs_df$Year))

# Inflation Rate and Median Wage Growth Plot
inflation_wage_plot <- ggplot(infl_wgs_df, aes(x = Year)) +
  geom_line(aes(y = `Inflation Rate`, color = "Inflation Rate"), size = 1) +
  geom_line(aes(y = `Median Wage Growth`, color = "Median Wage Growth"), size = 1) +
  scale_color_manual(values = c("Inflation Rate" = "darkblue", "Median Wage Growth" = "#44b80a")) +
  labs(
    title = "Inflation Rate and Median Wage Growth (1983-2023)",
    x = "Year",
    y = "Rate (%)",
    color = "Legend"
  ) +
  theme_minimal() +
  theme(
    plot.title = element_text(hjust = 0.5),
    legend.position = "top"
  ) +
  scale_x_continuous(breaks = seq(1960, 2024, by = 10)) +
  scale_y_continuous()

print(inflation_wage_plot)
```

```{r infl-wgs-yoy-lineplot_[15], echo=TRUE, message=FALSE, warning=FALSE}
#| code-fold: TRUE
infl_wgs_yoy_plot <- ggplot(infl_wgs_df, aes(x = Year)) +
  geom_line(aes(y = `YoY Inflation Differential`, color = "Inflation Differential"), size = 1) +
  geom_line(aes(y = `YoY Wages Differential`, color = "Wage Differential"), size = 1) +
  scale_color_manual(values = c("Inflation Differential" = "darkblue", "Wage Differential" = "#44b80a")) +
  labs(
    title = "YoY Differentials (1983-2023)",
    x = "Year",
    y = "Differential (%)",
    color = "Legend"
  ) +
  theme_minimal() +
  theme(
    plot.title = element_text(hjust = 0.5),
    legend.position = "top"
  ) +
  scale_x_continuous(breaks = seq(1960, 2024, by = 10)) +
  scale_y_continuous() +
  geom_hline(yintercept = 0, linetype = "dashed", color = "gray") # Centered at 0

print(infl_wgs_yoy_plot)
```

Market Dataframe and Plots

```{r markets-combining_[16], echo=TRUE, message=FALSE, warning=FALSE}
#| code-fold: TRUE
market_df <- us_monthly_medians |>
  inner_join(intl_monthly_medians, by = "Year", suffix = c("_US", "_Intl")) |>
  mutate(
    Avg_Price_US = (High_US + Low_US) / 2,
    Avg_Price_Intl = (High_Intl + Low_Intl) / 2
  ) |>
  select(
    `Year`,
    `Average Price U.S. Markets` = `Avg_Price_US`, # decided to go with the average
    `Traded Volume US` = `Traded Volume_US`,
    `Average Price International Markets` = `Avg_Price_Intl`,
    `Traded Volume Intl` = `Traded Volume_Intl`
  )

market_df |>
  DT::datatable()
```


```{r markets-lineplot_[17], echo=TRUE, message=FALSE, warning=FALSE}
#| code-fold: TRUE
market_df$Year <- as.numeric(as.character(market_df$Year))

ggplot(market_df, aes(x = Year)) +
  geom_line(aes(y = `Average Price U.S. Markets`, color = "U.S. Markets"), size = 1) +
  geom_line(aes(y = `Average Price International Markets`, color = "International Markets"), size = 1) +
  scale_color_manual(values = c("U.S. Markets" = "darkblue", "International Markets" = "#44b80a")) +
  labs(
    title = "Average Price by Year (U.S. and International Markets)",
    x = "Year",
    y = "Average Price",
    color = "Market"
  ) +
  theme_minimal() +
  theme(plot.title = element_text(hjust = 0.5))
```

```{r markets-bargraph_[18], echo=TRUE, message=FALSE, warning=FALSE}
#| code-fold: TRUE
# Transform data to long format for plotting for bar graph
volume_data <- market_df |>
  pivot_longer(
    cols = c(`Traded Volume US`, `Traded Volume Intl`),
    names_to = "Market",
    values_to = "Traded Volume"
  ) |>
  mutate(Market = recode(Market, 
                         `Traded Volume US` = "U.S. Markets",
                         `Traded Volume Intl` = "International Markets"))

# Overlaid bar graph
ggplot(volume_data, aes(x = Year, y = `Traded Volume`, fill = Market)) +
  geom_bar(stat = "identity", position = "dodge") +
  scale_fill_manual(values = c("U.S. Markets" = "darkblue", "International Markets" = "#44b80a")) +
  scale_y_continuous(
    labels = scales::comma, # Format Y-axis with commas
    expand = c(0, 0)        # Remove extra space at the bottom of the bars
  ) +
  scale_x_continuous(
    breaks = seq(2011, 2023, by = 1), 
    limits = c(2011, 2023)           
  ) +
  labs(
    title = "Traded Volume by Year (U.S. and International Markets)",
    x = "Year",
    y = "Traded Volume",
    fill = "Market"
  ) +
  theme_minimal() +
  theme(
    plot.title = element_text(hjust = 0.5),
    axis.text.x = element_text(angle = 45, hjust = 1), 
    plot.background = element_rect(fill = "gray", color = NA), 
    panel.background = element_rect(fill = "gray", color = NA) 
  )
```

Finally, looking at a bonds-to-debt ratio over time to try and get an understanding for how investing and risk in the U.S. has looked over time.
```{r bonds-and-debt_[19], echo=TRUE, message=FALSE, warning=FALSE}
#| code-fold: TRUE
# Combine the two datasets on Year
bonds_and_debts <- clean_bond_df |>
  inner_join(clean_short_term_debt_df, by = "Year", suffix = c("_Bond", "_Debt")) |>
  mutate(
    Bond_to_Debt_Ratio = `Median Bond Price` / `Annual Financials` # Calculate bond-to-debt ratio
  )

bonds_and_debts$Year <- as.numeric(as.character(bonds_and_debts$Year))

ggplot(bonds_and_debts, aes(x = Year, y = Bond_to_Debt_Ratio)) +
  geom_line(color = "purple", size = 1) +
  geom_hline(yintercept = 1, linetype = "dashed", color = "gray") +
  labs(
    title = "Bond-to-Debt Ratio Over Time",
    x = "Year",
    y = "Bond-to-Debt Ratio"
  ) +
  theme_minimal() +
  theme(plot.title = element_text(hjust = 0.5))
```


## Task 05: Historical Comparison

Now we'll compare the two plans, TRS and ORP, to get a sense of how each performs, for a CUNY employee who joined in the first month of the historical data.

For this, we'll look at Professor Bob. Bob Started teaching at Baruch back in 1983; he's seen his income increase over time exactly in-line with his fellow Americans, and he's been saving from the minute he took the position. Bob retired in 2013, 30 years after starting. He's now had 10 years of post-retirement pension. Although he is still living pretty reasonably well-off, he wonders if he made the right choice.

You see, back in 1983, he was offered two plans. The more traditional plan, the *Teachers Retirement System* (TRS), where Baruch takes the brunt of the market risk for Bob, and the new *Optional Retirement Plan* (ORP), a more aggressive approach to financial planning, which would allow Bob to more directly invest in the market, similar to a 401(k).

Bob is a more prudent person, always has been, he took the more understandable (and still very good) TRS, but he's always wondered "what if?".

Let's help Bob out. Looking at market data over the same time span and understanding how each plan works, would Bob have been better off with the ORP, or did he make the right decision sticking with the TRS?

First, let's see how Bob did. His starting wage in 1983 was \$52,567 which grew yearly in-line with the U.S. Median Wage. This meant that by his retirement in 2013, Bob was earning an Adjusted Gross Income (AGI) of nearly \$180K! Good on ya, Bob.

```{r working-bob_[20], echo=TRUE, message=FALSE, warning=FALSE}
#| code-fold: TRUE
# The story of Professor Bob
working_bob <- wgs |>
  filter(Year <= 2013) |>
  rename(mwg = `Median Wage Growth`) |>
  mutate(Income = ifelse(Year == 1983, 52267.01, NA),
         mwg = (mwg / 100)) |>
  select(-`YoY Differential`)



for (i in 2:nrow(working_bob)) {
  working_bob$Income[i] <- working_bob$Income[i - 1] * (1 + working_bob$mwg[i])
}

working_bob$Year <- as.numeric(as.character(working_bob$Year))

print(glue("Professor Bob's starting income in {min(working_bob$Year)} is {dollar(round(min(working_bob$Income), 2))}.\n His salary at retirement in {max(working_bob$Year)} is {dollar(round(max(working_bob$Income), 2))}."))
```


```{r working-bob-plot_[21], echo=TRUE, message=FALSE, warning=FALSE}
#| code-fold: TRUE
# Create the ggplot2 object with custom tooltip
working_bob_plot <- ggplot(working_bob, aes(x = Year, y = Income)) +
  geom_line(color = "#44b80a", size = 1.5) +  # Line for Income
  geom_hline(yintercept = 100000, linetype = "dashed", color = "gray") +
  geom_hline(yintercept = 200000, linetype = "dashed", color = "gray") +
  labs(
    title = "Professor Bob's Income Over Time (1983 - 2013)",
    x = "Year",
    y = "Income ($)"
  ) +
  scale_x_continuous(
    breaks = seq(min(working_bob$Year), max(working_bob$Year), by = 5)  
  ) +
  scale_y_continuous(labels = dollar_format(accuracy = 0.01)) + # $ format
  theme_minimal() +
  theme(
    plot.title = element_text(hjust = 0.5),
    axis.text.x = element_text(angle = 45, hjust = 1), 
    plot.background = element_rect(fill = "gray", color = NA), 
    panel.background = element_rect(fill = "gray", color = NA) 
  )

working_bob_plot <- working_bob_plot +
  geom_line(aes(text = paste0("Year: ", Year, "<br>Income: ", dollar(Income, accuracy = 0.01))), size = 1, color = NA)

# make it interactive
bobs_working_plot <- ggplotly(working_bob_plot, tooltip = "text")

bobs_working_plot
```

The exact math behind each retirement package can get a little tricky. For TRS, first, employees pay a fixed percentage of their paycheck into the pension fund based on their AGI.

We can monitor Bob's contributions over the years here:

```{r saving-bob_[22], echo=TRUE, message=FALSE, warning=FALSE}
#| code-fold: TRUE

# TRS employee contribution function
trs_pct <- function(salary){
  case_when(
    salary <= 45000 ~ 0.03,
    salary <= 55000 ~ 0.035,
    salary <= 75000 ~ 0.045,
    salary <= 100000 ~ 0.0575,
    TRUE ~ 0.06
  )
}


# Bob's contributions
working_bob <- working_bob |>
  mutate(
    bobs_contributions = round(Income * trs_pct(Income),2)
  )


# View Bob's contributions in-line w/ MWG in the U.S.
working_bob |>
  mutate(Income = round(Income,2)) |>
  rename(`Median Wage Growth (U.S.)`= mwg,
         `Bob's Income` = Income) |>
  DT::datatable(
    options = list(pageLength = 11,
                   columnDefs = list(
                     # Adding commas for these columns
                     list(
                       targets = c(3,4),
                       render = JS(
                         "function(data, type, row, meta) {",
                         "  return type === 'display' ? '$ ' + data.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',') : data;",  
                         "}"
                       )
                     ),
                     # Formatting as percentages
                     list(
                       targets = c(2),
                       render = JS(
                         "function(data, type, row, meta) {",
                         "  return type === 'display' ? (data*100).toFixed(2) + '%' : data;",  # Formatting as percentage
                         "}"
                       )
                     )
                   )
    )
  )

```

Then, the retirement benefit is calculated based on a *Final Average Salary*, which computes the average of the final 3 years salary for an employee to use in a calculation, which also factors in the number of years an employee worked for Baruch.

```{r bobs-fas_[23], echo=FALSE, message=FALSE, warning=FALSE}
#| code-fold: TRUE
# Bob's FAS

bobs_fas <- sum(tail(working_bob$Income,3))/3

print(glue("The average salary for Bob's final 3 years of work at CUNY is {dollar(bobs_fas)}.60")) # manually adding the .60 to the printout b/c it's being annoying
```

Knowing this, we can calculate Bob's annual retirement benefit from CUNY, including how much it increases yearly (in-line with inflation).

What this means is, the benefit amount is increased annually in-line with the rate of inflation; the exact calculation halves the rate of inflation then rounds-up to the nearest tenth, for example a 2.9% rate of inflation divided by 2 and rounded up to the nearest-tenth returns a 1.5% annual increase. However, the increase exists within a band of 1-3% and can not exceed that band on either end.

```{r bobs-yearly-rate_[24], echo=FALSE, message=FALSE, warning=FALSE}
#| code-fold: TRUE
### function for trs' fas calculation
trs_fas_calculation <- function(years,fas){
  case_when(
    years < 20 ~ (0.0167 * fas * years)/12,
    years == 20 ~ (0.0175 * fas * years)/12,
    years > 20 ~ ((0.35 + 0.02 * years) * fas)/12
  )
}

# starting pension
initial_savings_from_work <- sum(working_bob$bobs_contributions, na.rm = TRUE)

initial_savings_from_work

# calculating cuny's starting contribution
cuny_first_contribution <- trs_fas_calculation(30,bobs_fas)

cuny_first_contribution


trs_infl_adj <- function(infl){
  adj = round((infl*50),1)/100
  case_when(
    adj < 0.01 ~ 0.01,
    adj > 0.03 ~ 0.03,
    TRUE ~ adj
  )
}


# Bob's retirement pension
retirement_bob <- clean_inflation_df |>
  filter(Year >= 2014) |>
  rename(
    infl_rt = `Inflation Rate`,
    yoy_infl_diff = `YoY Differential`
  ) |>
  mutate(
    infl_rt = infl_rt / 100,
    yoy_infl_diff = yoy_infl_diff / 100
  ) |>
  mutate(
    cpi = trs_infl_adj(infl_rt)
  ) |>
  mutate(
    # Initialize columns
    starting_pension = if_else(Year == 2014, initial_savings_from_work, NA_real_),
    contribution = if_else(Year == 2014, cuny_first_contribution, NA_real_),
    ending_pension = initial_savings_from_work + cuny_first_contribution
  )

for (i in 2:nrow(retirement_bob)){
  retirement_bob$contribution[i] = (retirement_bob$contribution[i] <- retirement_bob$contribution[i-1] +
                                      (retirement_bob$contribution[i - 1] * retirement_bob$cpi[i]))
  
  retirement_bob$starting_pension[i] = retirement_bob$ending_pension[i - 1]
  
  retirement_bob$ending_pension[i] = retirement_bob$starting_pension[i] + retirement_bob$contribution[i]
}


retirement_bob <- retirement_bob |>
  mutate(
    monthly_pension = ((starting_pension + ending_pension) / 24), # Divide by 2 to get the yearly average, divide by 12 to get the monthly average
    pension_increase = if_else(row_number()==1,0.0,(monthly_pension - lag(monthly_pension))),
    monthly_contribution = (contribution / 12),
    contribution_increase = if_else(row_number()==1,0.0,round((contribution - lag(contribution)),2)),
    contribution_pct_increase = if_else(row_number()==1,0.0,((contribution - lag(contribution))/lag(contribution))) #  this should just mirror the CPI as a check
  )

retirement_bob |>
  mutate(
    ending_pension = round(ending_pension,2),
    monthly_pension = round(monthly_pension,2),
    contribution = round(contribution,2),
    monthly_contribution = round(monthly_contribution,2)
  ) |>
  select(
    Year,
    `End of Year Pension` = ending_pension,
    `Monthly Available Pension` = monthly_pension,
    `Yearly Contribution` = contribution,
    `Monthly Contribution` = monthly_contribution
  ) |>
  DT::datatable(
    options = list(pageLength = 10,
                   columnDefs = list(
                     # Adding commas for these columns
                     list(
                       targets = c(2,3,4,5),
                       render = JS(
                         "function(data, type, row, meta) {",
                         "  return type === 'display' ? '$ ' + data.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',') : data;",  
                         "}"
                       )
                     )
                   )
    )
  )

print(glue("CUNY's average monthly contribution to Bob's account since 2014 is {dollar(mean(retirement_bob$monthly_contribution))}.\nThe average Monthly Available Pension since 2014 is {dollar(mean(retirement_bob$monthly_pension))}."))

```

Bob is left with a neat monthly contribution from CUNY of $1,215.74 on average since 2014, and has an available pension of \$22,324.85 to withdraw from.

Let's check if Bob's monthly available pension over the past decade would've been greater if he went with the ORP instead of TRS.

Bob joined CUNY Baruch at Age 35.

He worked from 1983 - 2013 (30 years) with a starting salary of $52,267.

The ORP method is an account on an Index or Fund that Bob can contribute to with various contribution levels and asset allocations depending on age and income. Finally, it also has an employer (CUNY) contribution of 8% for the first seven years of employment, then 10% every year after (so 23 years for Bob at 10%).

NOTE: Due to the fact the data on US Markets, International Markets, U.S. Bonds, and Short-Term Debt do not completely go back to 1983 (with International Markets only being tracked under the *VXUS* symbol since 2011), I have used a resampling method to generate dummy historical data to fill in the gap. Please keep this in mind while proceeding through Task 5.

```{r hypothetical-bob_[25], echo=FALSE, message=FALSE, warning=FALSE}
#| code-fold: TRUE

# ORP Method

bobs_age <- 40

opr_bob <- working_bob |>
  select(
    Year,
    mwg,
    income = Income
  ) |>
  mutate(
    age = if_else(row_number()==1,bobs_age,NA_real_)
  )

for (i in 2:nrow(opr_bob)){
  opr_bob$age[i] = opr_bob$age[i - 1] + 1
}

# need US Market, International Market, and Bonds data

# have to create dummy historical data

### US Market
us_mkt <- us_monthly_medians |>
  mutate(
    avg_price = round((Open + Close)/2,2)
  ) |>
  select(
    Year,
    avg_price
  )

# Define the range of historical years
historical_years <- data.frame(Year = 1983:1998)

# Resample avg_price values for market data
set.seed(42)

historical_data <- historical_years |>
  mutate(avg_price = sample(us_mkt$avg_price, size = nrow(historical_years), replace = TRUE))

us_mkt$Year <- as.numeric(as.character(us_mkt$Year))

# Combine historical and existing data
extended_us_mkt_data <- bind_rows(historical_data, us_mkt)

filtered_us_mkt_data <- extended_us_mkt_data |>
  filter(Year <= 2013)

### Intl Market
intl_mkt <- intl_monthly_medians |>
  mutate(
    avg_price = round((Open + Close)/2,2)
  ) |>
  select(
    Year,
    avg_price
  )

# Define the range of historical years
historical_years <- data.frame(Year = 1983:2010)

historical_data <- historical_years |>
  mutate(avg_price = sample(intl_mkt$avg_price, size = nrow(historical_years), replace = TRUE))

intl_mkt$Year <- as.numeric(as.character(intl_mkt$Year))

# Combine historical and existing data
extended_intl_mkt_data <- bind_rows(historical_data, intl_mkt) 

filtered_intl_mkt_data <- extended_intl_mkt_data |>
  filter(Year <= 2013)



### Bonds

bonds <- clean_bond_df |>
  select(
    Year,
    median_bond_price = `Median Bond Price`
  )

# Define the range of historical years
historical_years <- data.frame(Year = 1983:1987)

historical_data <- historical_years |>
  mutate(median_bond_price = sample(bonds$median_bond_price, size = nrow(historical_years), replace = TRUE))

bonds$Year <- as.numeric(as.character(bonds$Year))

# Combine historical and existing data
extended_bonds_data <- bind_rows(historical_data, bonds)

filtered_bonds_data <- extended_bonds_data |>
  filter(Year <= 2013)

### Short-Term Debt

debts <- clean_short_term_debt_df |>
  select(
    Year,
    avg_price = `Annual Financials`
  )

historical_years <- data.frame(Year = 1983:2008)

historical_data <- historical_years |>
  mutate(avg_price = sample(debts$avg_price, size = nrow(historical_years), replace = TRUE))

debts$Year <- as.numeric(as.character(debts$Year))

# Combine historical and existing data
extended_debts_data <- bind_rows(historical_data, debts) |>
  rename(
    avg_debts_price = avg_price
  )

filtered_debts_data <- extended_debts_data |>
  filter(Year <= 2013)

### combine everything

opr_cont <- function(years_worked,income){
  case_when(
    years_worked <= 7 ~ case_when(
      income <= 45000 ~ 0.03 * income + (0.08 * income),
      income <= 55000 ~ 0.035 * income + (0.08 * income),
      income <= 75000 ~ 0.045 * income + (0.08 * income),
      income <= 100000 ~ 0.0575 * income + (0.08 * income),
      income > 100000 ~ 0.06 * income + (0.08 * income)
      ),
    years_worked > 7 ~ case_when(
      income <= 45000 ~ (0.03 * income) + (0.1 * income), # after 7 years CUNY contributes 10%+
      income <= 55000 ~ 0.035 * income + (0.1 * income),
      income <= 75000 ~ 0.045 * income + (0.1 * income),
      income <= 100000 ~ 0.0575 * income + (0.1 * income),
      income > 100000 ~ 0.06 * income + (0.1 * income)
    )
  )
}

opr_bob <- opr_bob |>
  mutate(
    years_worked = row_number() - 1
  )

opr_bob_invest <- opr_bob |>
  mutate(
    yearly_contribution = opr_cont(years_worked,opr_bob$income),
    monthly_contribution = opr_cont(years_worked,opr_bob$income)/12
  ) |>
  left_join(
    extended_us_mkt_data, by="Year"
  ) |>
  rename(
    `avg_price_us_mkt` = avg_price
  ) |>
  mutate(
    bought_us_mkt_shares =  case_when(
      between(age, 25, 49) ~ (yearly_contribution * 0.54) / avg_price_us_mkt,
      between(age, 50, 59) ~ (yearly_contribution * 0.47) / avg_price_us_mkt,
      between(age, 60, 74) ~ (yearly_contribution * 0.34) / avg_price_us_mkt,
      age > 74 ~ (yearly_contribution * 0.19) / avg_price_us_mkt
    )
  ) |>
  left_join(
    filtered_intl_mkt_data, by = "Year"
  ) |>
  rename(
    `avg_price_intl_mkt` = avg_price
  ) |>
  mutate(
    bought_intl_mkt_shares = case_when(
      between(age, 25, 49) ~ (yearly_contribution * 0.36) / avg_price_intl_mkt,
      between(age, 50, 59) ~ (yearly_contribution * 0.32) / avg_price_intl_mkt,
      between(age, 60, 74) ~ (yearly_contribution * 0.23) / avg_price_intl_mkt,
      age > 74 ~ (yearly_contribution * 0.13) / avg_price_intl_mkt
    )
  ) |>
  left_join(
    filtered_bonds_data, by = "Year"
  ) |>
  mutate(
    bought_bonds = case_when(
      between(age, 25, 49) ~ (yearly_contribution * 0.10) / median_bond_price,
      between(age, 50, 59) ~ (yearly_contribution * 0.21) / median_bond_price,
      between(age, 60, 74) ~ (yearly_contribution * 0.43) / median_bond_price,
      age > 74 ~ (yearly_contribution * 0.62) / median_bond_price
    )
  ) |>
  left_join(
    filtered_debts_data, by = "Year"
  ) |>
  mutate(
    bought_debts = case_when(
      age <= 74 ~ 0,
      age > 74 ~ (yearly_contribution * 0.06) / avg_debts_price
    )
  )


all_markets <- extended_us_mkt_data |>
  rename(
    `avg_price_us_mkt` = avg_price
    ) |>
  left_join(
    extended_intl_mkt_data, by = "Year"
    ) |>
  rename(
    `avg_price_intl_mkt` = avg_price
    ) |>
  left_join(
    extended_bonds_data, by = "Year"
    ) |>
  left_join(
    extended_debts_data, by = "Year"
    ) 


filtered_all_markets <- all_markets |>
  filter(Year >= 2014)

bob_us_mkt_shares <- sum(opr_bob_invest$bought_us_mkt_shares)

bob_intl_mkt_shares <- sum(opr_bob_invest$bought_intl_mkt_shares)

bob_bond_shares <- sum(opr_bob_invest$bought_bonds)

bob_debts_shares <- sum(opr_bob_invest$bought_debts)

bobs_markets <- filtered_all_markets |>
  mutate(
    bobs_us_shares = round(bob_us_mkt_shares,3),
    bobs_us_shares_price = round((avg_price_us_mkt * bob_us_mkt_shares),2),
    bobs_intl_shares = round(bob_intl_mkt_shares,3),
    bobs_intl_shares_price = round((avg_price_intl_mkt * bob_intl_mkt_shares),2),
    bobs_bond_shares = round(bob_bond_shares,3),
    bobs_bonds_shares_price = round((median_bond_price * bob_bond_shares),2),
    bobs_debts_shares = round(bob_debts_shares,3),
    bobs_debts_shares_price = round((avg_debts_price * bob_debts_shares),2)
  )


bobs_markets |>
  select(
    Year,
    `Average Price of U.S. Market` = avg_price_us_mkt,
    `U.S. Shares` = bobs_us_shares,
    `U.S. Shares Value` = bobs_us_shares_price,
    `Average Price of International Market` = avg_price_intl_mkt,
    `International Shares` = bobs_intl_shares,
    `International Shares Value` = bobs_intl_shares_price,
    `Median Bond Price` = median_bond_price,
    `Bonds Shares` = bobs_bond_shares,
    `Bonds Shares Values` = bobs_bonds_shares_price,
    `Average Price of Debt Market` = avg_debts_price,
    `Shares of Debt` = bobs_debts_shares,
    `Value of Shares of Debt` = bobs_debts_shares_price
  ) |>
  DT::datatable(
    options = list(pageLength = 7,
                   columnDefs = list(
                     # Adding commas for these columns
                     list(
                       targets = c(3,6,9,12),
                       render = JS(
                         "function(data, type, row, meta) {",
                         "  return type === 'display' ? data.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',') : data;",  # Adding commas
                         "}"
                       )
                     ),
                     # accounting format
                     list(
                       targets = c(2,4,5,7,8,10,11,13),
                       render = JS(
                         "function(data, type, row, meta) {",
                         "  return type === 'display' ? '$ ' + data.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',') : data;",  
                         "}"
                       )
                     )
                   )
    )
  )
```

```{r orp-bob-savings_[26], echo=FALSE, message=FALSE, warning=FALSE}
bob_total_savings <- (
  mean(bobs_markets$bobs_us_shares_price) + 
    mean(bobs_markets$bobs_intl_shares_price) +
    mean(bobs_markets$bobs_bonds_shares_price) +
    mean(bobs_markets$bobs_debts_shares_price)
  )

print(glue("Bob's total savings with the ORP plan, averaged on the various markets he invested in\n, would give him a final investment portfolio of {dollar(bob_total_savings)}.00.\nThat is significantly more than he received from the TRP."))
```

## Task 06: Fixed-Rate Analysis






## Task 07: Monte-Carlo Analysis




# Conclusion

