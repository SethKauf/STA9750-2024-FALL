[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "My first website!",
    "section": "",
    "text": "Hi all, my name is Seth, I’m in the MS Statistics program at Baruch.\nI have some data science experience having taken a bootcamp in 2021 and having worked in the field since completing it.\nI’m in 3 classes this semester, one of which is making me learn and write a lot of math notation in markdown real fast, \\(\\log\\times\\Pr[D_{train}]=\\prod_{i=1}^n(f_1(x_i)^{y_i} \\times f_0(x_i)^{1-y_i})\\times\\log=\\sum_{i=1}^n\\log(f_1(x_i)^{y_i}\\times f_0(x_i)^{1-y_i})\\) was a fun one. \\(k\\in\\Re\\) looks pretty cool, too.\nAnyways, I really like transit data, my first major project was analyzing and predicting train delays on the NYC Subway. I wrote a short blog about gathering MTA data from their Alerts webpage.\nI also am interested in sports data, for example, I want to do a project on how Shot Attempts affect a game and whether they truly matter (something broadcasters cried to the heavens they did this past NHL Stanley Cup Playoffs).\nMy lukewarm take on modern data science, there’s a lot of hype around AI and rightfully so, but I feel there’s some disconnect between what we call AI and what people think of AI. It seems we’re still pretty far from things like autonomous robots, as cool as Bender might be.\n\n\n\nlinked from GIPHY\n\n\nFeel free to direct message me on Piazza or GitHub if you want to connect.\nLooking forward to a great semester!"
  },
  {
    "objectID": "mp01.html",
    "href": "mp01.html",
    "title": "Mini Project 1",
    "section": "",
    "text": "This project for STA 9750 has us looking at Federal Transit Administration Data, specifically for 2022.\nWe will try to answer some questions about transit from that year in this file."
  },
  {
    "objectID": "docs/mp01.html",
    "href": "docs/mp01.html",
    "title": "Task 1: Rename column UZA Name to metro_area",
    "section": "",
    "text": "library(tidyverse) library(DT)\nFARES &lt;- readxl::read_xlsx(“2022_fare_revenue.xlsx”) |&gt; select(-State/Parent NTD ID, -Reporter Type, -Reporting Module, -TOS, -Passenger Paid Fares, -Organization Paid Fares) |&gt; filter(Expense Type == “Funds Earned During Period”) |&gt; select(-Expense Type)\nEXPENSES &lt;- readr::read_csv(“2022_expenses.csv”) |&gt; select(NTD ID, Agency, Total, Mode) |&gt; mutate(NTD ID = as.integer(NTD ID)) |&gt; rename(Expenses = Total) |&gt; group_by(NTD ID, Mode) |&gt; summarize(Expenses = sum(Expenses)) |&gt; ungroup()\nFINANCIALS &lt;- inner_join(FARES, EXPENSES, join_by(NTD ID, Mode))\nTRIPS &lt;- readxl::read_xlsx(“ridership.xlsx”, sheet=“UPT”) |&gt; filter(Mode/Type of Service Status == “Active”) |&gt; select(-Legacy NTD ID, -Reporter Type, -Mode/Type of Service Status, -UACE CD, -TOS) |&gt; pivot_longer(-c(NTD ID:3 Mode), names_to=“month”, values_to=“UPT”) |&gt; drop_na() |&gt; mutate(month=my(month)) # Parse _m_onth _y_ear date specs\nMILES &lt;- readxl::read_xlsx(“ridership.xlsx”, sheet=“VRM”) |&gt; filter(Mode/Type of Service Status == “Active”) |&gt; select(-Legacy NTD ID, -Reporter Type, -Mode/Type of Service Status, -UACE CD, -TOS) |&gt; pivot_longer(-c(NTD ID:3 Mode), names_to=“month”, values_to=“VRM”) |&gt; drop_na() |&gt; group_by(NTD ID, Agency, UZA Name, Mode, 3 Mode, month) |&gt; summarize(VRM = sum(VRM)) |&gt; ungroup() |&gt; mutate(month=my(month)) # Parse _m_onth _y_ear date specs\nUSAGE &lt;- inner_join(TRIPS, MILES) |&gt; mutate(NTD ID = as.integer(NTD ID))\nsample_n(USAGE, 1000) |&gt; mutate(month=as.character(month)) |&gt; # DT::datatable()\nhead(USAGE,n=5)\n\nTask 1: Rename column UZA Name to metro_area\nlibrary(dplyr)\ncolnames(USAGE)\nUSAGE &lt;- USAGE |&gt; rename(“metro_area” = “UZA Name”)\ncolnames(USAGE)\n\n\nTask 2: Find unique Modes, impute with a more understandable value using case-when\nhead(USAGE) USAGE |&gt; distinct(Mode) |&gt; arrange(Mode)\nUSAGE &lt;- USAGE |&gt; mutate(Mode=case_when( Mode == “AR” ~ “Alaska Railroad”, Mode == “CB” ~ “Commuter Bus”, Mode == “CC” ~ “Cable Car”, Mode == “CR” ~ “Commuter Rail”, Mode == “DR” ~ “Demand Response”, Mode == “FB” ~ “Ferryboat”, Mode == “HR” ~ “Heavy Rail”, Mode == “IP” ~ “Inclined Plane”, Mode == “LR” ~ “Light Rail”, Mode == “MB” ~ “Bus”, Mode == “MG” ~ “Monorail and Automated Guideway modes”, Mode == “PB” ~ “Publico”, Mode == “RB” ~ “Bus Rapid Transit”, Mode == “SR” ~ “Streetcar Rail”, Mode == “TB” ~ “Trolleybus”, Mode == “TR” ~ “Aerial Tramways”, Mode == “VP” ~ “Vanpool”, Mode == “YR” ~ “Hybrid Rail”, TRUE ~ “Unknown”)) USAGE\nhead(USAGE) USAGE |&gt; distinct(Mode) |&gt; arrange(Mode)\nUSAGE &lt;- USAGE |&gt; rename( “unlinked_passenger_trips” = “UPT”, “vehicle_revenue_miles” = “VRM”) |&gt; select( -NTD ID, -3 Mode)\nlibrary(DT)\nsample_n(USAGE, 1000) |&gt; mutate(month=as.character(month)) |&gt; DT::datatable()\n\n\nTask 3: Answer specific questions\nhead(USAGE)\n#3.1: Which transit agency had the most total VRM in this sample? # A grouped summarize that takes the first returned item in descending order should get that USAGE |&gt; group_by(Agency) |&gt; summarize(n_vrm = n()) |&gt; arrange(desc(n_vrm)) |&gt; slice_head(n=1)\n\n\nAnswer: New Jersey Transit Corporation with 2,048\n\n\n3.2: Which transit mode had the most total VRM in this sample?\n\n\nSame code as 3.1 but replacing Agency with Mode\nUSAGE |&gt; group_by(Mode) |&gt; summarize(n_vrm = n()) |&gt; arrange(desc(n_vrm)) |&gt; slice_head(n=1)\n\n\nAnswer: Demand Response with 115,701\n\n\n3.3: How many trips were taken on the NYC Subway (Heavy Rail) in May 2024?\n#install.packages(“stringr”) library(stringr)\n\n\nFirst checking to ensure that May 2024 is only denoted by 2024-05-01\nUSAGE |&gt; filter(str_detect(month, “2024-05-”)) |&gt; distinct(month) #checks out\n\n\nEnsuring I get the right Agency name\nUSAGE |&gt; filter(str_detect(Agency,“MTA”)) |&gt; distinct(Agency)\n\n\nUnlinked Passenger Trips (UPT) are defined as:\n\n\nThe number of passengers who board public transportation vehicles.\n\n\nPassengers are counted each time they board vehicles\n\n\nno matter how many vehicles they use to travel from their origin\n\n\nto their destination.\nUSAGE |&gt; filter(month == ‘2024-05-01’, Agency == “MTA New York City Transit”, Mode == “Heavy Rail”) |&gt; select(unlinked_passenger_trips) #Answer: 180,458,819 trips\n\n\n3.4: Which Mode of transport had the longest average trip in May 2024?\nUSAGE |&gt; filter(month == ‘2024-05-01’) |&gt; group_by(Mode) |&gt; summarize(trips_avg = mean(unlinked_passenger_trips)) |&gt; arrange(desc(trips_avg)) |&gt; slice_head(n=1)\n\n\nAnswer: Heavy Rail, with 14,836,486 average trips\n\n\nI did this question before 3.4 was marked as unneccesary due to not having the correct feature to run this analysis\n\n\nBut I’ve left it in regardless\n\n\n3.5: How much did NYC Subway ridership fall between April 2019 and April 2020?\nUSAGE |&gt; filter(Agency == “MTA New York City Transit”, Mode == “Heavy Rail”, month &gt;= ‘2019-04-01’, month &lt; ‘2020-05-01’) |&gt; select(unlinked_passenger_trips)\n\n\nLet’s plot the ridership numbers\nlibrary(ggplot2) library(lubridate)\ndates &lt;- seq(ymd(“2019-04-01”), by = “month”, length.out = 13) ridership &lt;- c(USAGE |&gt; filter(month &gt;= ‘2019-04-01’, month &lt; ‘2020-05-01’, Agency == ‘MTA New York City Transit’, Mode == ‘Heavy Rail’))\n\n\nCreate a data frame\ndata &lt;- data.frame(Date = dates, Ridership = ridership)\n\n\ninstall.packages(“scales”)\nlibrary(scales)\n\n\nPlot ridership over time\nggplot(data, aes(x = Date, y = Ridership.unlinked_passenger_trips)) + # Change x and y accordingly geom_line() + geom_point() + labs(title = “NYC Subway Ridership from April 2019 through April 2020”, x = “Date”, y = “Total Trips”) + scale_y_continuous(labels = label_number()) + # Prevent scientific notation theme_minimal() + theme( plot.title = element_text(hjust = 0.5, size = 16, face = “bold”), # Center the title and make it bold axis.title.x = element_text(size = 14), # Change x-axis title size axis.title.y = element_text(size = 14), # Change y-axis title size axis.text = element_text(size = 12), # Change axis text size panel.grid.minor = element_blank() # Remove minor grid lines )\n\n\nTask 4: Find 3 more interesting facts in this data\nhead(USAGE, n=7)\n\n\n4.1: What’s the most miles traveled by agency + mode and how does it compare to the number of trips?\nUSAGE |&gt; group_by(Agency, Mode) |&gt; summarize(total_travel = sum(vehicle_revenue_miles, na.rm = TRUE), .groups=“drop”) |&gt; arrange(desc(total_travel)) |&gt; slice_head(n=3) # NYC Subway leads the way in revenue miles, followed by NJT Bus and LA Bus\nUSAGE |&gt; group_by(Agency, Mode) |&gt; summarize(total_travel = sum(unlinked_passenger_trips, na.rm = TRUE), .groups=“drop”) |&gt; arrange(desc(total_travel)) |&gt; slice_head(n=3) # NYC Subway leads the way here as well, while NJT Bus is overtaken by NYC’s bus system # The distance between the MTA and the next few is quite large\n\n\n4.2 Which Agency manages the most Modes?\nUSAGE |&gt; group_by(Agency) |&gt; summarize(total_modes = n_distinct(Mode)) |&gt; arrange(desc(total_modes)) # Massachusetts Bay Transportation Authority\n\n\n4.3 Which date saw the most usage for the NYC Subway?\nUSAGE |&gt; filter(Agency == ‘MTA New York City Transit’, Mode == ‘Heavy Rail’) |&gt; group_by(month) |&gt; summarize(most_trips = sum(unlinked_passenger_trips, na.rm = TRUE)) |&gt; arrange(desc(most_trips)) |&gt; slice_head(n=1) # 2019-10-01\n\n\nconversely, which had the fewest?\nUSAGE |&gt; filter(Agency == ‘MTA New York City Transit’, Mode == ‘Heavy Rail’) |&gt; group_by(month) |&gt; summarize(most_trips = sum(unlinked_passenger_trips, na.rm = TRUE)) |&gt; arrange((most_trips)) |&gt; slice_head(n=1) # 2020-04-01\n\n\nTask 5: Create a new table with annual total (sum) for UPT and VRM for 2022\nUSAGE &lt;- inner_join(TRIPS, MILES) |&gt; mutate(NTD ID = as.integer(NTD ID))\nUSAGE &lt;- USAGE |&gt; mutate(Mode=case_when( Mode == “AR” ~ “Alaska Railroad”, Mode == “CB” ~ “Commuter Bus”, Mode == “CC” ~ “Cable Car”, Mode == “CR” ~ “Commuter Rail”, Mode == “DR” ~ “Demand Response”, Mode == “FB” ~ “Ferryboat”, Mode == “HR” ~ “Heavy Rail”, Mode == “IP” ~ “Inclined Plane”, Mode == “LR” ~ “Light Rail”, Mode == “MB” ~ “Bus”, Mode == “MG” ~ “Monorail and Automated Guideway modes”, Mode == “PB” ~ “Publico”, Mode == “RB” ~ “Bus Rapid Transit”, Mode == “SR” ~ “Streetcar Rail”, Mode == “TB” ~ “Trolleybus”, Mode == “TR” ~ “Aerial Tramways”, Mode == “VP” ~ “Vanpool”, Mode == “YR” ~ “Hybrid Rail”, TRUE ~ “Unknown”))\nUSAGE_2022_ANNUAL &lt;- USAGE |&gt; select(-3 Mode) |&gt; rename(“metro_area” = “UZA Name”) |&gt; filter(year(month)==‘2022’) |&gt; group_by(NTD ID, Agency,metro_area,Mode) |&gt; summarize(UPT = sum(UPT), VRM = sum(VRM)) |&gt; ungroup()\nhead(USAGE_2022_ANNUAL, n=2)\nFINANCIALS &lt;- FINANCIALS |&gt; mutate(Mode=case_when( Mode == “AR” ~ “Alaska Railroad”, Mode == “CB” ~ “Commuter Bus”, Mode == “CC” ~ “Cable Car”, Mode == “CR” ~ “Commuter Rail”, Mode == “DR” ~ “Demand Response”, Mode == “FB” ~ “Ferryboat”, Mode == “HR” ~ “Heavy Rail”, Mode == “IP” ~ “Inclined Plane”, Mode == “LR” ~ “Light Rail”, Mode == “MB” ~ “Bus”, Mode == “MG” ~ “Monorail and Automated Guideway modes”, Mode == “PB” ~ “Publico”, Mode == “RB” ~ “Bus Rapid Transit”, Mode == “SR” ~ “Streetcar Rail”, Mode == “TB” ~ “Trolleybus”, Mode == “TR” ~ “Aerial Tramways”, Mode == “VP” ~ “Vanpool”, Mode == “YR” ~ “Hybrid Rail”, TRUE ~ “Unknown”))\nUSAGE_AND_FINANCIALS &lt;- left_join(USAGE_2022_ANNUAL, FINANCIALS, join_by(NTD ID, Mode)) |&gt; drop_na()\nUSAGE_AND_FINANCIALS\n\n\nTask 6: Answer the following 6 questions using USAGE_AND_FINANCIALS\n\n\n6.1: Which transit system (agency and mode) had the most UPT in 2022?\nUSAGE_AND_FINANCIALS |&gt; group_by(Agency, Mode) |&gt; summarize(Total_UPT = sum(UPT, na.rm=TRUE), .groups=“drop”) |&gt; arrange(desc(Total_UPT)) |&gt; slice_head(n=1) # MTA New York City Transit – Heavy Rail\n\n\n6.2: Which transit system (agency and mode) had the highest farebox recovery,\n\n\ndefined as the highest ratio of Total Fares to Expenses?\nUSAGE_AND_FINANCIALS |&gt; group_by(Agency,Mode) |&gt; summarize(fbx_rcv = sum(Total Fares, na.rm = TRUE) / sum(Expenses, na.rm = TRUE), .groups=“drop”) |&gt; arrange(desc(fbx_rcv)) |&gt; slice_head(n=1) # Transit Authority of Central Kentucky – Vanpool\n\n\n6.3: Which transit system (agency and mode) had the lowest expenses per UPT?\nUSAGE_AND_FINANCIALS |&gt; filter(UPT &gt;= 1) |&gt; group_by(Agency,Mode) |&gt; summarize(lwst_exp_upt = sum(Expenses, na.rm = TRUE) / sum(UPT, na.rm = TRUE), .groups=“drop”) |&gt; arrange(lwst_exp_upt) |&gt; slice_head(n=1) # North Caroline State University – Bus\n\n\n6.4: Which transit system (agency and mode) had the highest total fares per UPT?\nUSAGE_AND_FINANCIALS |&gt; filter(Total Fares &gt;= 1) |&gt; group_by(Agency,Mode) |&gt; summarize(hghst_fr_upt = sum(UPT, na.rm = TRUE) / sum(Total Fares, na.rm = TRUE), .groups=“drop”) |&gt; # summarize(hghst_fr_upt = sum(UPT, na.rm = TRUE) / sum(Total Fares, na.rm = TRUE), .groups=“drop”) |&gt; arrange(desc(hghst_fr_upt)) |&gt; slice_head(n=1) # Athens-Clarke County Unified Government – Bus\n\n\n6.5: Which transit system (agency and mode) had the lowest expenses per VRM?\nUSAGE_AND_FINANCIALS |&gt; filter(UPT &gt;= 1) |&gt; group_by(Agency,Mode) |&gt; summarize(lwst_exp_vrm = sum(Expenses, na.rm = TRUE) / sum(VRM, na.rm = TRUE), .groups=“drop”) |&gt; arrange(lwst_exp_vrm) |&gt; slice_head(n=1) # New Mexico Department of Transportation – Vanpool\n\n\n6.6: Which transit system (agency and mode) had the highest total fares per VRM?\nUSAGE_AND_FINANCIALS |&gt; filter(Total Fares &gt;= 1) |&gt; group_by(Agency,Mode) |&gt; summarize(hghst_fr_vrm = sum(VRM, na.rm = TRUE) / sum(Total Fares, na.rm = TRUE), .groups=“drop”) |&gt; arrange(desc(hghst_fr_vrm)) |&gt; slice_head(n=1) # Athens-Clarke County Unified Government – Bus"
  },
  {
    "objectID": "mp01.html#task-1-rename-column-uza-name-to-metro_area",
    "href": "mp01.html#task-1-rename-column-uza-name-to-metro_area",
    "title": "Mini Project 1",
    "section": "Task 1: Rename column UZA Name to metro_area",
    "text": "Task 1: Rename column UZA Name to metro_area\n\ncolnames(USAGE)\n\n[1] \"NTD ID\"   \"Agency\"   \"UZA Name\" \"Mode\"     \"3 Mode\"   \"month\"    \"UPT\"     \n[8] \"VRM\"     \n\nUSAGE &lt;- USAGE |&gt; rename(\"metro_area\" = \"UZA Name\")\n\ncolnames(USAGE)\n\n[1] \"NTD ID\"     \"Agency\"     \"metro_area\" \"Mode\"       \"3 Mode\"    \n[6] \"month\"      \"UPT\"        \"VRM\""
  },
  {
    "objectID": "mp01.html#task-2-find-unique-modes-impute-with-a-more-understandable-value-using-case-when",
    "href": "mp01.html#task-2-find-unique-modes-impute-with-a-more-understandable-value-using-case-when",
    "title": "Mini Project 1",
    "section": "Task 2: Find unique Modes, impute with a more understandable value using case-when",
    "text": "Task 2: Find unique Modes, impute with a more understandable value using case-when\n\nhead(USAGE)\n\n# A tibble: 6 × 8\n  `NTD ID` Agency      metro_area        Mode  `3 Mode` month         UPT    VRM\n     &lt;int&gt; &lt;chr&gt;       &lt;chr&gt;             &lt;chr&gt; &lt;chr&gt;    &lt;date&gt;      &lt;dbl&gt;  &lt;dbl&gt;\n1        1 King County Seattle--Tacoma,… DR    Bus      2002-01-01 135144 746158\n2        1 King County Seattle--Tacoma,… DR    Bus      2002-02-01 127378 656324\n3        1 King County Seattle--Tacoma,… DR    Bus      2002-03-01 136030 726578\n4        1 King County Seattle--Tacoma,… DR    Bus      2002-04-01 142204 736975\n5        1 King County Seattle--Tacoma,… DR    Bus      2002-05-01 144697 746158\n6        1 King County Seattle--Tacoma,… DR    Bus      2002-06-01 131833 696633\n\nUSAGE |&gt;\n  distinct(Mode) |&gt;\n  arrange(Mode)\n\n# A tibble: 18 × 1\n   Mode \n   &lt;chr&gt;\n 1 AR   \n 2 CB   \n 3 CC   \n 4 CR   \n 5 DR   \n 6 FB   \n 7 HR   \n 8 IP   \n 9 LR   \n10 MB   \n11 MG   \n12 PB   \n13 RB   \n14 SR   \n15 TB   \n16 TR   \n17 VP   \n18 YR   \n\nUSAGE &lt;- USAGE |&gt;\n  mutate(Mode=case_when(\n    Mode == \"AR\" ~ \"Alaska Railroad\",\n    Mode == \"CB\" ~ \"Commuter Bus\",\n    Mode == \"CC\" ~ \"Cable Car\",\n    Mode == \"CR\" ~ \"Commuter Rail\",\n    Mode == \"DR\" ~ \"Demand Response\",\n    Mode == \"FB\" ~ \"Ferryboat\",\n    Mode == \"HR\" ~ \"Heavy Rail\",\n    Mode == \"IP\" ~ \"Inclined Plane\",\n    Mode == \"LR\" ~ \"Light Rail\",\n    Mode == \"MB\" ~ \"Bus\",\n    Mode == \"MG\" ~ \"Monorail and Automated Guideway modes\",\n    Mode == \"PB\" ~ \"Publico\",\n    Mode == \"RB\" ~ \"Bus Rapid Transit\",\n    Mode == \"SR\" ~ \"Streetcar Rail\",\n    Mode == \"TB\" ~ \"Trolleybus\",\n    Mode == \"TR\" ~ \"Aerial Tramways\",\n    Mode == \"VP\" ~ \"Vanpool\",\n    Mode == \"YR\" ~ \"Hybrid Rail\",\n    TRUE ~ \"Unknown\"))\n\nhead(USAGE)\n\n# A tibble: 6 × 8\n  `NTD ID` Agency      metro_area        Mode  `3 Mode` month         UPT    VRM\n     &lt;int&gt; &lt;chr&gt;       &lt;chr&gt;             &lt;chr&gt; &lt;chr&gt;    &lt;date&gt;      &lt;dbl&gt;  &lt;dbl&gt;\n1        1 King County Seattle--Tacoma,… Dema… Bus      2002-01-01 135144 746158\n2        1 King County Seattle--Tacoma,… Dema… Bus      2002-02-01 127378 656324\n3        1 King County Seattle--Tacoma,… Dema… Bus      2002-03-01 136030 726578\n4        1 King County Seattle--Tacoma,… Dema… Bus      2002-04-01 142204 736975\n5        1 King County Seattle--Tacoma,… Dema… Bus      2002-05-01 144697 746158\n6        1 King County Seattle--Tacoma,… Dema… Bus      2002-06-01 131833 696633\n\nUSAGE |&gt;\n  distinct(Mode) |&gt;\n  arrange(Mode)\n\n# A tibble: 18 × 1\n   Mode                                 \n   &lt;chr&gt;                                \n 1 Aerial Tramways                      \n 2 Alaska Railroad                      \n 3 Bus                                  \n 4 Bus Rapid Transit                    \n 5 Cable Car                            \n 6 Commuter Bus                         \n 7 Commuter Rail                        \n 8 Demand Response                      \n 9 Ferryboat                            \n10 Heavy Rail                           \n11 Hybrid Rail                          \n12 Inclined Plane                       \n13 Light Rail                           \n14 Monorail and Automated Guideway modes\n15 Publico                              \n16 Streetcar Rail                       \n17 Trolleybus                           \n18 Vanpool                              \n\nUSAGE &lt;- USAGE |&gt;     rename( \"unlinked_passenger_trips\" = \"UPT\",\n                              \"vehicle_revenue_miles\" = \"VRM\") |&gt;\n  select( -`NTD ID`,\n          -`3 Mode`)\n\nsample_n(USAGE, 1000) |&gt; \n    mutate(month=as.character(month)) |&gt; \n    DT::datatable()"
  },
  {
    "objectID": "mp01.html#task-3-answer-specific-questions",
    "href": "mp01.html#task-3-answer-specific-questions",
    "title": "Mini Project 1",
    "section": "Task 3: Answer specific questions",
    "text": "Task 3: Answer specific questions\n\nhead(USAGE)\n\n# A tibble: 6 × 6\n  Agency      metro_area          Mode         month      unlinked_passenger_t…¹\n  &lt;chr&gt;       &lt;chr&gt;               &lt;chr&gt;        &lt;date&gt;                      &lt;dbl&gt;\n1 King County Seattle--Tacoma, WA Demand Resp… 2002-01-01                 135144\n2 King County Seattle--Tacoma, WA Demand Resp… 2002-02-01                 127378\n3 King County Seattle--Tacoma, WA Demand Resp… 2002-03-01                 136030\n4 King County Seattle--Tacoma, WA Demand Resp… 2002-04-01                 142204\n5 King County Seattle--Tacoma, WA Demand Resp… 2002-05-01                 144697\n6 King County Seattle--Tacoma, WA Demand Resp… 2002-06-01                 131833\n# ℹ abbreviated name: ¹​unlinked_passenger_trips\n# ℹ 1 more variable: vehicle_revenue_miles &lt;dbl&gt;\n\n\n\n3.1: Which transit agency had the most total VRM in this sample?\n\n# A grouped summarize that takes the first returned item in descending order should get that\nUSAGE |&gt;\n  group_by(Agency) |&gt;\n  summarize(n_vrm = n()) |&gt;\n  arrange(desc(n_vrm)) |&gt;\n  slice_head(n=1)\n\n# A tibble: 1 × 2\n  Agency                         n_vrm\n  &lt;chr&gt;                          &lt;int&gt;\n1 New Jersey Transit Corporation  2048\n\n\nAnswer: New Jersey Transit Corporation with 2,048\n\n\n3.2: Which transit mode had the most total VRM in this sample?\n\n# Same code as 3.1 but replacing Agency with Mode\nUSAGE |&gt;\n  group_by(Mode) |&gt;\n  summarize(n_vrm = n()) |&gt;\n  arrange(desc(n_vrm)) |&gt;\n  slice_head(n=1)\n\n# A tibble: 1 × 2\n  Mode             n_vrm\n  &lt;chr&gt;            &lt;int&gt;\n1 Demand Response 115701\n\n\nAnswer: Demand Response with 115,701\n\n\n3.3: How many trips were taken on the NYC Subway (Heavy Rail) in May 2024?\n\n#install.packages(\"stringr\")\nlibrary(stringr)\n\n# First checking to ensure that May 2024 is only denoted by 2024-05-01\nUSAGE |&gt;\n  filter(str_detect(month, \"2024-05-\")) |&gt;\n  distinct(month) #checks out\n\n# A tibble: 1 × 1\n  month     \n  &lt;date&gt;    \n1 2024-05-01\n\n# Ensuring I get the right Agency name\nUSAGE |&gt;\n  filter(str_detect(Agency,\"MTA\")) |&gt;\n  distinct(Agency)\n\n# A tibble: 4 × 1\n  Agency                                                              \n  &lt;chr&gt;                                                               \n1 MTA New York City Transit                                           \n2 Metro-North Commuter Railroad Company, dba: MTA Metro-North Railroad\n3 MTA Long Island Rail Road                                           \n4 MTA Bus Company                                                     \n\n# Unlinked Passenger Trips (UPT) are defined as:\n# The number of passengers who board public transportation vehicles.\n# Passengers are counted each time they board vehicles\n# no matter how many vehicles they use to travel from their origin\n# to their destination.\n\n\nUSAGE |&gt;\n  filter(month == '2024-05-01',\n         Agency == \"MTA New York City Transit\",\n         Mode == \"Heavy Rail\") |&gt;\n  select(unlinked_passenger_trips)\n\n# A tibble: 1 × 1\n  unlinked_passenger_trips\n                     &lt;dbl&gt;\n1                180458819\n\n\nAnswer: 180,458,819 trips\n\n\n3.4: Which Mode of transport had the longest average trip in May 2024?\n\nUSAGE |&gt;\n  filter(month == '2024-05-01') |&gt;\n  group_by(Mode) |&gt;\n  summarize(trips_avg = mean(unlinked_passenger_trips)) |&gt;\n  arrange(desc(trips_avg)) |&gt;\n  slice_head(n=1)\n\n# A tibble: 1 × 2\n  Mode       trips_avg\n  &lt;chr&gt;          &lt;dbl&gt;\n1 Heavy Rail 14836486.\n\n\nAnswer: Heavy Rail, with 14,836,486 average trips (I did this question before 3.4 was marked as unneccesary due to not having the correct feature to run this analysis, but I’ve left it in regardless)\n\n\n3.5: How much did NYC Subway ridership fall between April 2019 and April 2020?\n\nUSAGE |&gt;\n  filter(Agency == \"MTA New York City Transit\",\n         Mode == \"Heavy Rail\",\n         month &gt;= '2019-04-01',\n         month &lt; '2020-05-01') |&gt;\n  select(unlinked_passenger_trips)\n\n# A tibble: 13 × 1\n   unlinked_passenger_trips\n                      &lt;dbl&gt;\n 1                232223929\n 2                235967209\n 3                224274463\n 4                229774505\n 5                229171856\n 6                230694038\n 7                253609943\n 8                235137305\n 9                236357677\n10                231863427\n11                227432375\n12                119654860\n13                 20254269\n\n# Let's plot the ridership numbers\nif(!require(\"ggplot2\")) install.packages(\"ggplot2\")\nif(!require(\"lubridate\")) install.packages(\"lubridate\")\n\nlibrary(ggplot2)\nlibrary(lubridate)\n\ndates &lt;- seq(ymd(\"2019-04-01\"), by = \"month\", length.out = 13)\nridership &lt;- c(USAGE |&gt;\n                 filter(month &gt;= '2019-04-01',\n                        month &lt; '2020-05-01',\n                        Agency == 'MTA New York City Transit',\n                        Mode == 'Heavy Rail'))\n\n# Create a data frame\ndata &lt;- data.frame(Date = dates, Ridership = ridership)\n\nif(!require(\"scales\")) install.packages(\"scales\")\n\nLoading required package: scales\n\n\n\nAttaching package: 'scales'\n\n\nThe following object is masked from 'package:purrr':\n\n    discard\n\n\nThe following object is masked from 'package:readr':\n\n    col_factor\n\nlibrary(scales)\n\n# Plot ridership over time\nggplot(data, aes(x = Date, y = Ridership.unlinked_passenger_trips)) +  # Change x and y accordingly\n  geom_line() +\n  geom_point() +\n  labs(title = \"NYC Subway Ridership from April 2019 through April 2020\", x = \"Date\", y = \"Total Trips\") +\n  scale_y_continuous(labels = label_number()) +  # Prevent scientific notation\n  theme_minimal() +\n  theme(\n    plot.title = element_text(hjust = 0.5, size = 16, face = \"bold\"),  # Center the title and make it bold\n    axis.title.x = element_text(size = 14),  # Change x-axis title size\n    axis.title.y = element_text(size = 14),  # Change y-axis title size\n    axis.text = element_text(size = 12),  # Change axis text size\n    panel.grid.minor = element_blank()  # Remove minor grid lines\n  )"
  },
  {
    "objectID": "mp01.html#task-4-find-3-more-interesting-facts-in-this-data",
    "href": "mp01.html#task-4-find-3-more-interesting-facts-in-this-data",
    "title": "Mini Project 1",
    "section": "Task 4: Find 3 more interesting facts in this data",
    "text": "Task 4: Find 3 more interesting facts in this data\n\nhead(USAGE, n=7)\n\n# A tibble: 7 × 6\n  Agency      metro_area          Mode         month      unlinked_passenger_t…¹\n  &lt;chr&gt;       &lt;chr&gt;               &lt;chr&gt;        &lt;date&gt;                      &lt;dbl&gt;\n1 King County Seattle--Tacoma, WA Demand Resp… 2002-01-01                 135144\n2 King County Seattle--Tacoma, WA Demand Resp… 2002-02-01                 127378\n3 King County Seattle--Tacoma, WA Demand Resp… 2002-03-01                 136030\n4 King County Seattle--Tacoma, WA Demand Resp… 2002-04-01                 142204\n5 King County Seattle--Tacoma, WA Demand Resp… 2002-05-01                 144697\n6 King County Seattle--Tacoma, WA Demand Resp… 2002-06-01                 131833\n7 King County Seattle--Tacoma, WA Demand Resp… 2002-07-01                 137547\n# ℹ abbreviated name: ¹​unlinked_passenger_trips\n# ℹ 1 more variable: vehicle_revenue_miles &lt;dbl&gt;\n\n\n\n4.1: What’s the most miles traveled by agency + mode and how does it compare to the number of trips?\n\nUSAGE |&gt;\n  group_by(Agency, Mode) |&gt;\n  summarize(total_travel = sum(vehicle_revenue_miles, na.rm = TRUE), .groups=\"drop\") |&gt;\n  arrange(desc(total_travel)) |&gt;\n  slice_head(n=3)\n\n# A tibble: 3 × 3\n  Agency                                                   Mode     total_travel\n  &lt;chr&gt;                                                    &lt;chr&gt;           &lt;dbl&gt;\n1 MTA New York City Transit                                Heavy R…   7732916753\n2 New Jersey Transit Corporation                           Bus        3781858802\n3 Los Angeles County Metropolitan Transportation Authority Bus        3501202902\n\n\nNYC Subway leads the way in revenue miles, followed by NJT Bus and LA Bus\n\nUSAGE |&gt;\n  group_by(Agency, Mode) |&gt;\n  summarize(total_travel = sum(unlinked_passenger_trips, na.rm = TRUE), .groups=\"drop\") |&gt;\n  arrange(desc(total_travel)) |&gt;\n  slice_head(n=3)\n\n# A tibble: 3 × 3\n  Agency                                                   Mode     total_travel\n  &lt;chr&gt;                                                    &lt;chr&gt;           &lt;dbl&gt;\n1 MTA New York City Transit                                Heavy R…  51672094135\n2 MTA New York City Transit                                Bus       16889723939\n3 Los Angeles County Metropolitan Transportation Authority Bus        7114375207\n\n\nNYC Subway leads the way here as well, while NJT Bus is overtaken by NYC’s bus system. The distance between the MTA and the next few is quite large.\n\n\n4.2 Which Agency manages the most Modes?\n\nUSAGE |&gt;\n  group_by(Agency) |&gt;\n  summarize(total_modes = n_distinct(Mode)) |&gt;\n  arrange(desc(total_modes)) # Massachusetts Bay Transportation Authority\n\n# A tibble: 677 × 2\n   Agency                                                   total_modes\n   &lt;chr&gt;                                                          &lt;int&gt;\n 1 Massachusetts Bay Transportation Authority                         7\n 2 Central Oklahoma Transportation and Parking Authority              6\n 3 City and County of San Francisco                                   6\n 4 City of Charlotte North Carolina                                   6\n 5 County of Miami-Dade                                               6\n 6 Dallas Area Rapid Transit                                          6\n 7 King County                                                        6\n 8 Los Angeles County Metropolitan Transportation Authority           6\n 9 Maryland Transit Administration                                    6\n10 Metropolitan Transit Authority of Harris County, Texas             6\n# ℹ 667 more rows\n\n\n\n\n4.3 Which date saw the most usage for the NYC Subway?\n\nUSAGE |&gt;\n  filter(Agency == 'MTA New York City Transit',\n         Mode == 'Heavy Rail') |&gt;\n  group_by(month) |&gt;\n  summarize(most_trips = sum(unlinked_passenger_trips, na.rm = TRUE)) |&gt;\n  arrange(desc(most_trips)) |&gt;\n  slice_head(n=1) # 2019-10-01\n\n# A tibble: 1 × 2\n  month      most_trips\n  &lt;date&gt;          &lt;dbl&gt;\n1 2019-10-01  253609943\n\n# conversely, which had the fewest?\nUSAGE |&gt;\n  filter(Agency == 'MTA New York City Transit',\n         Mode == 'Heavy Rail') |&gt;\n  group_by(month) |&gt;\n  summarize(most_trips = sum(unlinked_passenger_trips, na.rm = TRUE)) |&gt;\n  arrange((most_trips)) |&gt;\n  slice_head(n=1) # 2020-04-01\n\n# A tibble: 1 × 2\n  month      most_trips\n  &lt;date&gt;          &lt;dbl&gt;\n1 2020-04-01   20254269\n\n\n2019-10-01 had the most while 2020-04-01 had the fewest"
  },
  {
    "objectID": "mp01.html#task-5-create-a-new-table-with-annual-total-sum-for-upt-and-vrm-for-2022",
    "href": "mp01.html#task-5-create-a-new-table-with-annual-total-sum-for-upt-and-vrm-for-2022",
    "title": "Mini Project 1",
    "section": "Task 5: Create a new table with annual total (sum) for UPT and VRM for 2022",
    "text": "Task 5: Create a new table with annual total (sum) for UPT and VRM for 2022\n\nUSAGE &lt;- inner_join(TRIPS, MILES) |&gt;\n  mutate(`NTD ID` = as.integer(`NTD ID`))\n\nJoining with `by = join_by(`NTD ID`, Agency, `UZA Name`, Mode, `3 Mode`,\nmonth)`\n\nUSAGE &lt;- USAGE |&gt;\n  mutate(Mode=case_when(\n    Mode == \"AR\" ~ \"Alaska Railroad\",\n    Mode == \"CB\" ~ \"Commuter Bus\",\n    Mode == \"CC\" ~ \"Cable Car\",\n    Mode == \"CR\" ~ \"Commuter Rail\",\n    Mode == \"DR\" ~ \"Demand Response\",\n    Mode == \"FB\" ~ \"Ferryboat\",\n    Mode == \"HR\" ~ \"Heavy Rail\",\n    Mode == \"IP\" ~ \"Inclined Plane\",\n    Mode == \"LR\" ~ \"Light Rail\",\n    Mode == \"MB\" ~ \"Bus\",\n    Mode == \"MG\" ~ \"Monorail and Automated Guideway modes\",\n    Mode == \"PB\" ~ \"Publico\",\n    Mode == \"RB\" ~ \"Bus Rapid Transit\",\n    Mode == \"SR\" ~ \"Streetcar Rail\",\n    Mode == \"TB\" ~ \"Trolleybus\",\n    Mode == \"TR\" ~ \"Aerial Tramways\",\n    Mode == \"VP\" ~ \"Vanpool\",\n    Mode == \"YR\" ~ \"Hybrid Rail\",\n    TRUE ~ \"Unknown\"))\n\n\nUSAGE_2022_ANNUAL &lt;- USAGE |&gt;\n  select(-`3 Mode`) |&gt;\n  rename(\"metro_area\" = \"UZA Name\") |&gt;\n  filter(year(month)=='2022') |&gt;\n  group_by(`NTD ID`, `Agency`,`metro_area`,`Mode`) |&gt;\n  summarize(UPT = sum(UPT),\n            VRM = sum(VRM)) |&gt;\n  ungroup()\n\n`summarise()` has grouped output by 'NTD ID', 'Agency', 'metro_area'. You can\noverride using the `.groups` argument.\n\nhead(USAGE_2022_ANNUAL, n=2)\n\n# A tibble: 2 × 6\n  `NTD ID` Agency      metro_area          Mode                 UPT      VRM\n     &lt;int&gt; &lt;chr&gt;       &lt;chr&gt;               &lt;chr&gt;              &lt;dbl&gt;    &lt;dbl&gt;\n1        1 King County Seattle--Tacoma, WA Bus             53983641 61632644\n2        1 King County Seattle--Tacoma, WA Demand Response   663009 12860448\n\nFINANCIALS &lt;- FINANCIALS |&gt;\n  mutate(Mode=case_when(\n    Mode == \"AR\" ~ \"Alaska Railroad\",\n    Mode == \"CB\" ~ \"Commuter Bus\",\n    Mode == \"CC\" ~ \"Cable Car\",\n    Mode == \"CR\" ~ \"Commuter Rail\",\n    Mode == \"DR\" ~ \"Demand Response\",\n    Mode == \"FB\" ~ \"Ferryboat\",\n    Mode == \"HR\" ~ \"Heavy Rail\",\n    Mode == \"IP\" ~ \"Inclined Plane\",\n    Mode == \"LR\" ~ \"Light Rail\",\n    Mode == \"MB\" ~ \"Bus\",\n    Mode == \"MG\" ~ \"Monorail and Automated Guideway modes\",\n    Mode == \"PB\" ~ \"Publico\",\n    Mode == \"RB\" ~ \"Bus Rapid Transit\",\n    Mode == \"SR\" ~ \"Streetcar Rail\",\n    Mode == \"TB\" ~ \"Trolleybus\",\n    Mode == \"TR\" ~ \"Aerial Tramways\",\n    Mode == \"VP\" ~ \"Vanpool\",\n    Mode == \"YR\" ~ \"Hybrid Rail\",\n    TRUE ~ \"Unknown\"))\n\n\nUSAGE_AND_FINANCIALS &lt;- left_join(USAGE_2022_ANNUAL,\n                                  FINANCIALS,\n                                  join_by(`NTD ID`, `Mode`)) |&gt;\n  drop_na()\n\n\nhead(USAGE_AND_FINANCIALS,n=7)\n\n# A tibble: 7 × 9\n  `NTD ID` Agency     metro_area Mode     UPT    VRM `Agency Name` `Total Fares`\n     &lt;dbl&gt; &lt;chr&gt;      &lt;chr&gt;      &lt;chr&gt;  &lt;dbl&gt;  &lt;dbl&gt; &lt;chr&gt;                 &lt;dbl&gt;\n1        1 King Coun… Seattle--… Bus   5.40e7 6.16e7 King County …      56566150\n2        1 King Coun… Seattle--… Bus   5.40e7 6.16e7 King County …        280187\n3        1 King Coun… Seattle--… Dema… 6.63e5 1.29e7 King County …        740726\n4        1 King Coun… Seattle--… Dema… 6.63e5 1.29e7 King County …         91601\n5        1 King Coun… Seattle--… Ferr… 4.00e5 5.12e4 King County …       1715265\n6        1 King Coun… Seattle--… Stre… 1.12e6 1.80e5 King County …        588495\n7        1 King Coun… Seattle--… Trol… 9.58e6 2.64e6 King County …      10123486\n# ℹ 1 more variable: Expenses &lt;dbl&gt;"
  },
  {
    "objectID": "mp01.html#task-6-answer-the-following-6-questions-using-usage_and_financials",
    "href": "mp01.html#task-6-answer-the-following-6-questions-using-usage_and_financials",
    "title": "Mini Project 1",
    "section": "Task 6: Answer the following 6 questions using USAGE_AND_FINANCIALS",
    "text": "Task 6: Answer the following 6 questions using USAGE_AND_FINANCIALS\n\n6.1: Which transit system (agency and mode) had the most UPT in 2022?\n\nUSAGE_AND_FINANCIALS |&gt;\n  group_by(`Agency`, `Mode`) |&gt;\n  summarize(Total_UPT = sum(UPT, na.rm=TRUE), .groups=\"drop\") |&gt;\n  arrange(desc(Total_UPT)) |&gt;\n  slice_head(n=1)\n\n# A tibble: 1 × 3\n  Agency                    Mode        Total_UPT\n  &lt;chr&gt;                     &lt;chr&gt;           &lt;dbl&gt;\n1 MTA New York City Transit Heavy Rail 1793073801\n\n\nMTA New York City Transit – Heavy Rail\n\n\n6.2: Which transit system (agency and mode) had the highest farebox recovery, defined as the highest ratio of Total Fares to Expenses?\n\nUSAGE_AND_FINANCIALS |&gt;\n  group_by(`Agency`,`Mode`) |&gt;\n  summarize(fbx_rcv = sum(`Total Fares`, na.rm = TRUE) / sum(`Expenses`, na.rm = TRUE), .groups=\"drop\") |&gt;\n  arrange(desc(fbx_rcv)) |&gt;\n  slice_head(n=1)\n\n# A tibble: 1 × 3\n  Agency                                Mode    fbx_rcv\n  &lt;chr&gt;                                 &lt;chr&gt;     &lt;dbl&gt;\n1 Transit Authority of Central Kentucky Vanpool    2.38\n\n\nTransit Authority of Central Kentucky – Vanpool\n\n\n6.3: Which transit system (agency and mode) had the lowest expenses per UPT?\n\nUSAGE_AND_FINANCIALS |&gt;\n  filter(UPT &gt;= 1) |&gt;\n  group_by(`Agency`,`Mode`) |&gt;\n  summarize(lwst_exp_upt =  sum(`Expenses`, na.rm = TRUE) / sum(`UPT`, na.rm = TRUE), .groups=\"drop\") |&gt;\n  arrange(lwst_exp_upt) |&gt;\n  slice_head(n=1)\n\n# A tibble: 1 × 3\n  Agency                          Mode  lwst_exp_upt\n  &lt;chr&gt;                           &lt;chr&gt;        &lt;dbl&gt;\n1 North Carolina State University Bus           1.18\n\n\nNorth Caroline State University – Bus\n\n\n6.4: Which transit system (agency and mode) had the highest total fares per UPT?\n\nUSAGE_AND_FINANCIALS |&gt;\n  filter(`Total Fares` &gt;= 1) |&gt;\n  group_by(`Agency`,`Mode`) |&gt;\n  summarize(hghst_fr_upt = sum(`UPT`, na.rm = TRUE) / sum(`Total Fares`, na.rm = TRUE), .groups=\"drop\") |&gt;\n  # summarize(hghst_fr_upt = sum(`UPT`, na.rm = TRUE) / sum(`Total Fares`, na.rm = TRUE), .groups=\"drop\")  |&gt;\n  arrange(desc(hghst_fr_upt)) |&gt;\n  slice_head(n=1)\n\n# A tibble: 1 × 3\n  Agency                                  Mode  hghst_fr_upt\n  &lt;chr&gt;                                   &lt;chr&gt;        &lt;dbl&gt;\n1 Athens-Clarke County Unified Government Bus         522940\n\n\nAthens-Clarke County Unified Government – Bus\n\n\n6.5: Which transit system (agency and mode) had the lowest expenses per VRM?\n\nUSAGE_AND_FINANCIALS |&gt;\n  filter(UPT &gt;= 1) |&gt;\n  group_by(`Agency`,`Mode`) |&gt;\n  summarize(lwst_exp_vrm = sum(`Expenses`, na.rm = TRUE) / sum(`VRM`, na.rm = TRUE), .groups=\"drop\") |&gt;\n  arrange(lwst_exp_vrm) |&gt;\n  slice_head(n=1)\n\n# A tibble: 1 × 3\n  Agency                                  Mode    lwst_exp_vrm\n  &lt;chr&gt;                                   &lt;chr&gt;          &lt;dbl&gt;\n1 New Mexico Department of Transportation Vanpool        0.337\n\n\nNew Mexico Department of Transportation – Vanpool\n\n\n6.6: Which transit system (agency and mode) had the highest total fares per VRM?\n\nUSAGE_AND_FINANCIALS |&gt;\n  filter(`Total Fares` &gt;= 1) |&gt;\n  group_by(`Agency`,`Mode`) |&gt;\n  summarize(hghst_fr_vrm = sum(`VRM`, na.rm = TRUE) / sum(`Total Fares`, na.rm = TRUE), .groups=\"drop\") |&gt;\n  arrange(desc(hghst_fr_vrm)) |&gt;\n  slice_head(n=1)\n\n# A tibble: 1 × 3\n  Agency                                  Mode  hghst_fr_vrm\n  &lt;chr&gt;                                   &lt;chr&gt;        &lt;dbl&gt;\n1 Athens-Clarke County Unified Government Bus         380687\n\n\nAthens-Clarke County Unified Government – Bus"
  },
  {
    "objectID": "mp02.html",
    "href": "mp02.html",
    "title": "Mini Project 2",
    "section": "",
    "text": "Introduction\nFor STA 9750 Mini Project 2, I’m going to propose remaking a classic movie: Independence Day.\n\n\n\nWatch out, Earth!\n\n\n\n\nPitch\nOriginally released in 1996 and starring Will Smith, this film depicts Earth’s fight for freedom from an alien invasion.\nStarring Jacob Batalon in his breakout role as Captain Steven Hiller and famous robo-freedom-fighter John DiMaggio as David Levinson, this film follows an ensemble of characters as they look to save Earth from the new threat from the aliens of Omicron Persei 10.\n\n\n\n\nJacob Batalon\n\n\n\n\n\nJohn DiMaggio\n\n\n\nDirected by Glass Onion and Knives Out director Rian Johnson, the action behind this film belies the mystery of the Omicronians and their true plot.\n\n\n\nRian Johnson\n\n\n\n\nHow we got here\nNow that I’ve thoroughly grabbed your attention, how the heck did we come up with this cast of characters?\nAfter sorting through IMDb data, these three just truly spoke to us and we knew we were on to something.\n\n\nTask 0: In which the data is gathered\nSince we’re doing this in R, let’s get some code going\n\n# Install and import packages\nif(!require(\"ggplot2\")) install.packages(\"ggplot2\")\nif(!require(\"tidyverse\")) install.packages(\"tidyverse\")\nif(!require(\"dplyr\")) install.packages(\"dplyr\")\nif(!require(\"glue\")) install.packages(\"glue\")\nif(!require(\"scales\")) install.packages(\"scales\")\nif(!require(\"psych\")) install.packages(\"psych\")\nif(!require(\"plotly\")) install.packages(\"plotly\")\nif(!require(\"readr\")) install.packages(\"readr\")\n\nlibrary(ggplot2)\nlibrary(tidyverse)\nlibrary(dplyr)\nlibrary(glue)\nlibrary(scales)\nlibrary(psych)\nlibrary(plotly)\nlibrary(readr)\n\nNext let’s import our data\n\nget_imdb_file &lt;- function(fname){\n  BASE_URL &lt;- \"https://datasets.imdbws.com/\"\n  fname_ext &lt;- paste0(fname, \".tsv.gz\")\n  if(!file.exists(fname_ext)){\n    FILE_URL &lt;- paste0(BASE_URL, fname_ext)\n    download.file(FILE_URL, \n                  destfile = fname_ext)\n  }\n  as.data.frame(readr::read_tsv(fname_ext, lazy=FALSE))\n}\n\nNAME_BASICS      &lt;- get_imdb_file(\"name.basics\")\n\nTITLE_BASICS     &lt;- get_imdb_file(\"title.basics\")\n\nTITLE_EPISODES   &lt;- get_imdb_file(\"title.episode\")\n\nTITLE_RATINGS    &lt;- get_imdb_file(\"title.ratings\")\n\nTITLE_CREW       &lt;- get_imdb_file(\"title.crew\")\n\nTITLE_PRINCIPALS &lt;- get_imdb_file(\"title.principals\")\n\nNAME_BASICS &lt;- NAME_BASICS |&gt;\n  filter(str_count(knownForTitles, \",\") &gt; 1)\n\nLooking at the data we just pulled\n\nTITLE_RATINGS |&gt;\n  ggplot(aes(x=numVotes)) + \n  geom_histogram(bins=30) +\n  xlab(\"Number of IMDB Ratings\") + \n  ylab(\"Number of Titles\") + \n  ggtitle(\"Majority of IMDB Titles Have Less than 100 Ratings\") + \n  theme_bw() + \n  scale_x_log10(label=scales::comma) + \n  scale_y_continuous(label=scales::comma)\n\n\n\n\n\n\n\n\n\nTITLE_RATINGS |&gt;\n  pull(numVotes) |&gt;\n  quantile()\n\n     0%     25%     50%     75%    100% \n      5      11      26     101 2952383 \n\nTITLE_RATINGS &lt;- TITLE_RATINGS |&gt;\n  filter(numVotes &gt;= 100)\n\nTITLE_BASICS &lt;- TITLE_BASICS |&gt;\n  semi_join(TITLE_RATINGS, \n            join_by(tconst == tconst))\n\nTITLE_CREW &lt;- TITLE_CREW |&gt;\n  semi_join(TITLE_RATINGS, \n            join_by(tconst == tconst))\n\nTITLE_EPISODES_1 &lt;- TITLE_EPISODES |&gt;\n  semi_join(TITLE_RATINGS, \n            join_by(tconst == tconst))\nTITLE_EPISODES_2 &lt;- TITLE_EPISODES |&gt;\n  semi_join(TITLE_RATINGS, \n            join_by(parentTconst == tconst))\n\nTITLE_EPISODES &lt;- bind_rows(TITLE_EPISODES_1,\n                            TITLE_EPISODES_2) |&gt;\n  distinct()\n\nTITLE_PRINCIPALS &lt;- TITLE_PRINCIPALS |&gt;\n  semi_join(TITLE_RATINGS, join_by(tconst == tconst))\n\n\nrm(TITLE_EPISODES_1)\nrm(TITLE_EPISODES_2)\n\n#EDA\nNAME_BASICS &lt;- NAME_BASICS |&gt;\n  mutate(birthYear = as.numeric(birthYear),\n         deathYear = as.numeric(deathYear))\n\nWe have several tasks to complete with this data, including some EDA!\n\n\nTask 1: Clean Clean Clean\n\nconvert_columns &lt;- function(data, columns, conversion = \"numeric\") {\n  \n  # Check if conversion is valid\n  \n  if(!conversion %in% c(\"numeric\", \"logical\")) {\n    stop(\"Invalid conversion type. Choose either 'numeric' or 'logical'.\")\n  }\n  \n  # Apply the conversion based on argument\n  if (conversion == \"numeric\") {\n    data &lt;- data |&gt;\n      mutate(across(all_of(columns), as.numeric))\n  } else if (conversion == \"logical\") {\n   data &lt;- data |&gt;\n     mutate(across(all_of(columns), as.logical))\n  }\n  \n  return(data)\n}\n\nTITLE_BASICS &lt;- convert_columns(TITLE_BASICS, columns = c(\"startYear\",\"endYear\",\"runtimeMinutes\"), conversion=\"numeric\")\n\nTITLE_EPISODES &lt;- convert_columns(TITLE_EPISODES, columns=c(\"seasonNumber\",\"episodeNumber\"), conversion=\"numeric\")\n\n\n\nTask 2: Provided Questions, Provided Answers\nHere we seek to answer several questions from the dataset.\n\n#2.1: How many movies are in our data set? How many TV series? How many TV episodes?\n\n# TITLE_BASICS will have this answer\nglimpse(TITLE_BASICS)\n\nRows: 374,231\nColumns: 9\n$ tconst         &lt;chr&gt; \"tt0000001\", \"tt0000002\", \"tt0000003\", \"tt0000004\", \"tt…\n$ titleType      &lt;chr&gt; \"short\", \"short\", \"short\", \"short\", \"short\", \"short\", \"…\n$ primaryTitle   &lt;chr&gt; \"Carmencita\", \"Le clown et ses chiens\", \"Poor Pierrot\",…\n$ originalTitle  &lt;chr&gt; \"Carmencita\", \"Le clown et ses chiens\", \"Pauvre Pierrot…\n$ isAdult        &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ startYear      &lt;dbl&gt; 1894, 1892, 1892, 1892, 1893, 1894, 1894, 1894, 1894, 1…\n$ endYear        &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ runtimeMinutes &lt;dbl&gt; 1, 5, 5, 12, 1, 1, 1, 1, 45, 1, 1, 1, 1, 1, 2, 1, 1, 1,…\n$ genres         &lt;chr&gt; \"Documentary,Short\", \"Animation,Short\", \"Animation,Come…\n\ntable(TITLE_BASICS$titleType)\n\n\n       movie        short    tvEpisode tvMiniSeries      tvMovie     tvSeries \n      132246        16735       156768         5932        15048        29992 \n     tvShort    tvSpecial        video    videoGame \n         411         3064         9345         4690 \n\n# movie, tvEpisode and tvSeries\n\nMOVIE_COUNT &lt;- TITLE_BASICS |&gt;\n  filter(`titleType` == \"movie\") |&gt;\n  select(`tconst`) |&gt;\n  unique() |&gt;\n  count()\n\nsprintf(\"There are %s movies in the data\",format(MOVIE_COUNT,big.mark=\",\", scientific=FALSE))\n\n[1] \"There are 132,246 movies in the data\"\n\nTV_SERIES_COUNT &lt;- TITLE_BASICS |&gt;\n  filter(`titleType` == \"tvSeries\") |&gt;\n  select(`tconst`) |&gt;\n  unique() |&gt;\n  count()\n\nsprintf(\"There are %s TV Series in the data\",format(TV_SERIES_COUNT,big.mark=\",\", scientific=FALSE))\n\n[1] \"There are 29,992 TV Series in the data\"\n\nTV_EPISODE_COUNT &lt;- TITLE_BASICS |&gt;\n  filter(`titleType` == \"tvEpisode\") |&gt;\n  select(`tconst`) |&gt;\n  unique() |&gt;\n  count()\n\nsprintf(\"There are %s TV Episodes in the data\",format(TV_EPISODE_COUNT,big.mark=\",\", scientific=FALSE))\n\n[1] \"There are 156,768 TV Episodes in the data\"\n\n\n\n#2.2: Oldest living person in data\nglimpse(NAME_BASICS)\n\nRows: 3,189,865\nColumns: 6\n$ nconst            &lt;chr&gt; \"nm0000001\", \"nm0000002\", \"nm0000003\", \"nm0000004\", …\n$ primaryName       &lt;chr&gt; \"Fred Astaire\", \"Lauren Bacall\", \"Brigitte Bardot\", …\n$ birthYear         &lt;dbl&gt; 1899, 1924, 1934, 1949, 1918, 1915, 1899, 1924, 1925…\n$ deathYear         &lt;dbl&gt; 1987, 2014, NA, 1982, 2007, 1982, 1957, 2004, 1984, …\n$ primaryProfession &lt;chr&gt; \"actor,miscellaneous,producer\", \"actress,soundtrack,…\n$ knownForTitles    &lt;chr&gt; \"tt0072308,tt0050419,tt0053137,tt0027125\", \"tt003738…\n\nOLDEST &lt;- NAME_BASICS |&gt;\n  filter(is.na(`deathYear`)) |&gt;\n  arrange(`birthYear`) |&gt;\n  select(`primaryName`,`birthYear`,`deathYear`) |&gt;\n  slice_head(n=10)\n\nOLDEST\n\n         primaryName birthYear deathYear\n1     Traudl Lessing      1625        NA\n2    Robert De Visée      1655        NA\n3     William Sandys      1767        NA\n4     Richard Dybeck      1811        NA\n5     Albert Monnier      1815        NA\n6         C. Hostrup      1818        NA\n7     Edouard Martin      1825        NA\n8       Gustav Lange      1830        NA\n9  William S. Hooser      1836        NA\n10     Ion Ivanovici      1845        NA\n\n# Clearly this isn't the way to go about this\n\nglimpse(TITLE_BASICS)\n\nRows: 374,231\nColumns: 9\n$ tconst         &lt;chr&gt; \"tt0000001\", \"tt0000002\", \"tt0000003\", \"tt0000004\", \"tt…\n$ titleType      &lt;chr&gt; \"short\", \"short\", \"short\", \"short\", \"short\", \"short\", \"…\n$ primaryTitle   &lt;chr&gt; \"Carmencita\", \"Le clown et ses chiens\", \"Poor Pierrot\",…\n$ originalTitle  &lt;chr&gt; \"Carmencita\", \"Le clown et ses chiens\", \"Pauvre Pierrot…\n$ isAdult        &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ startYear      &lt;dbl&gt; 1894, 1892, 1892, 1892, 1893, 1894, 1894, 1894, 1894, 1…\n$ endYear        &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ runtimeMinutes &lt;dbl&gt; 1, 5, 5, 12, 1, 1, 1, 1, 45, 1, 1, 1, 1, 1, 2, 1, 1, 1,…\n$ genres         &lt;chr&gt; \"Documentary,Short\", \"Animation,Short\", \"Animation,Come…\n\nglimpse(NAME_BASICS)\n\nRows: 3,189,865\nColumns: 6\n$ nconst            &lt;chr&gt; \"nm0000001\", \"nm0000002\", \"nm0000003\", \"nm0000004\", …\n$ primaryName       &lt;chr&gt; \"Fred Astaire\", \"Lauren Bacall\", \"Brigitte Bardot\", …\n$ birthYear         &lt;dbl&gt; 1899, 1924, 1934, 1949, 1918, 1915, 1899, 1924, 1925…\n$ deathYear         &lt;dbl&gt; 1987, 2014, NA, 1982, 2007, 1982, 1957, 2004, 1984, …\n$ primaryProfession &lt;chr&gt; \"actor,miscellaneous,producer\", \"actress,soundtrack,…\n$ knownForTitles    &lt;chr&gt; \"tt0072308,tt0050419,tt0053137,tt0027125\", \"tt003738…\n\nNAME_BASICS |&gt; separate_longer_delim(knownForTitles, \",\") |&gt;\n  slice_head(n=5)\n\n     nconst   primaryName birthYear deathYear\n1 nm0000001  Fred Astaire      1899      1987\n2 nm0000001  Fred Astaire      1899      1987\n3 nm0000001  Fred Astaire      1899      1987\n4 nm0000001  Fred Astaire      1899      1987\n5 nm0000002 Lauren Bacall      1924      2014\n                   primaryProfession knownForTitles\n1       actor,miscellaneous,producer      tt0072308\n2       actor,miscellaneous,producer      tt0050419\n3       actor,miscellaneous,producer      tt0053137\n4       actor,miscellaneous,producer      tt0027125\n5 actress,soundtrack,archive_footage      tt0037382\n\nTITLES_AND_NAMES &lt;- NAME_BASICS |&gt;\n  separate_longer_delim(knownForTitles, delim = \",\") |&gt;\n  inner_join(TITLE_BASICS, by = c(\"knownForTitles\" = \"tconst\")) |&gt;\n  filter(is.na(deathYear),birthYear &gt;= 1908) |&gt; #according to google, the current oldest person alive was born in 1908\n  arrange(birthYear) |&gt;\n  select(primaryName, birthYear, deathYear) |&gt;\n  unique() |&gt;\n  slice_head(n = 5)\n\nhead(TITLES_AND_NAMES) # Because there are too many NULL deathYear values, this question can't really be answered\n\n     primaryName birthYear deathYear\n1  Robert Aisner      1908        NA\n2    Ugo Amadoro      1908        NA\n3     Hanna Bark      1908        NA\n4   Harry Belock      1908        NA\n5 Aida Broadbent      1908        NA\n\n\n\n#2.3: There is one TV Episode in this data set with a perfect 10/10 rating and at least 200,00 IMDb ratings. What is it? Which series does it belong to?\nglimpse(TITLE_RATINGS)\n\nRows: 374,231\nColumns: 3\n$ tconst        &lt;chr&gt; \"tt0000001\", \"tt0000002\", \"tt0000003\", \"tt0000004\", \"tt0…\n$ averageRating &lt;dbl&gt; 5.7, 5.6, 6.5, 5.4, 6.2, 5.0, 5.4, 5.4, 5.4, 6.8, 5.2, 7…\n$ numVotes      &lt;dbl&gt; 2096, 283, 2104, 183, 2839, 197, 889, 2243, 215, 7728, 4…\n\nHIGHEST_RATED &lt;- TITLE_RATINGS |&gt;\n  filter(numVotes &gt;= 200000) |&gt;\n  slice_max(order_by = averageRating) |&gt;\n  left_join(TITLE_EPISODES, by = c(\"tconst\" = \"tconst\")) |&gt;\n  inner_join(TITLE_BASICS, by = c(\"tconst\" = \"tconst\")) |&gt;\n  left_join(TITLE_BASICS, by = c(\"parentTconst\" = \"tconst\")) |&gt;\n  select(\n    filmID = `tconst`,\n    seriesName = `primaryTitle.y`,\n    episodeName = `primaryTitle.x`,\n    `seasonNumber`,\n    `episodeNumber`,\n    yearAired = `startYear.x`,\n    `averageRating`,\n    `numVotes`\n  )\n\nhead(HIGHEST_RATED) # Unsurprisingly, it's a season 5 episode of Breaking Bad, specifically, the one where Hank gets got\n\n     filmID   seriesName episodeName seasonNumber episodeNumber yearAired\n1 tt2301451 Breaking Bad  Ozymandias            5            14      2013\n  averageRating numVotes\n1            10   229933\n\n\nIf anyone’s interested in a famous scene (and subsequent meme) from this episode (Warning: violence and spoilers)\n\n  \n\n\n#2.4: Which 4 projects is actor Mark Hamill most known for?\n\n# Just guessing beforehand: Star War IV, V, VI, and VA for the Joker in the Batman animated series\n\nMARK_HAMILL &lt;- NAME_BASICS |&gt;\n  filter(primaryName == \"Mark Hamill\")\n\nMARK_HAMILL # going to guess the record with multiple titles is the correct Mark Hamill\n\n     nconst primaryName birthYear deathYear       primaryProfession\n1 nm0000434 Mark Hamill        NA        NA actor,producer,director\n                           knownForTitles\n1 tt0076759,tt2527336,tt0080684,tt0086190\n\nMARK_HAMILL &lt;- NAME_BASICS |&gt;\n  filter(nconst == \"nm0000434\") |&gt;\n  separate_longer_delim(knownForTitles, delim = \",\") |&gt;\n  inner_join(TITLE_BASICS, by = c(\"knownForTitles\" = \"tconst\")) |&gt;\n  select(actorID = `nconst`,\n         `primaryName`,\n         `primaryTitle`)\n\nprint(MARK_HAMILL)\n\n    actorID primaryName                                   primaryTitle\n1 nm0000434 Mark Hamill             Star Wars: Episode IV - A New Hope\n2 nm0000434 Mark Hamill        Star Wars: Episode VIII - The Last Jedi\n3 nm0000434 Mark Hamill Star Wars: Episode V - The Empire Strikes Back\n4 nm0000434 Mark Hamill     Star Wars: Episode VI - Return of the Jedi\n\n\nApparently, Star Wars Episode VIII gets a listing before his Joker VA. Hard disagree, but I digress.\n\n  \n\n\n#2.5: What TV series, with more than 12 episodes, has the highest average rating?\nglimpse(TITLE_EPISODES)\n\nRows: 3,023,489\nColumns: 4\n$ tconst        &lt;chr&gt; \"tt0045960\", \"tt0046855\", \"tt0048378\", \"tt0048562\", \"tt0…\n$ parentTconst  &lt;chr&gt; \"tt0044284\", \"tt0046643\", \"tt0047702\", \"tt0047768\", \"tt0…\n$ seasonNumber  &lt;dbl&gt; 2, 1, 1, 1, 1, 1, 1, 1, 1, 3, 3, 1, 8, 1, 10, 6, 2, 8, 4…\n$ episodeNumber &lt;dbl&gt; 3, 4, 6, 10, 4, 20, 5, 2, 20, 6, 2, 3, 2, 10, 17, 5, 1, …\n\nglimpse(TITLE_BASICS)\n\nRows: 374,231\nColumns: 9\n$ tconst         &lt;chr&gt; \"tt0000001\", \"tt0000002\", \"tt0000003\", \"tt0000004\", \"tt…\n$ titleType      &lt;chr&gt; \"short\", \"short\", \"short\", \"short\", \"short\", \"short\", \"…\n$ primaryTitle   &lt;chr&gt; \"Carmencita\", \"Le clown et ses chiens\", \"Poor Pierrot\",…\n$ originalTitle  &lt;chr&gt; \"Carmencita\", \"Le clown et ses chiens\", \"Pauvre Pierrot…\n$ isAdult        &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ startYear      &lt;dbl&gt; 1894, 1892, 1892, 1892, 1893, 1894, 1894, 1894, 1894, 1…\n$ endYear        &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ runtimeMinutes &lt;dbl&gt; 1, 5, 5, 12, 1, 1, 1, 1, 45, 1, 1, 1, 1, 1, 2, 1, 1, 1,…\n$ genres         &lt;chr&gt; \"Documentary,Short\", \"Animation,Short\", \"Animation,Come…\n\nglimpse(TITLE_RATINGS)\n\nRows: 374,231\nColumns: 3\n$ tconst        &lt;chr&gt; \"tt0000001\", \"tt0000002\", \"tt0000003\", \"tt0000004\", \"tt0…\n$ averageRating &lt;dbl&gt; 5.7, 5.6, 6.5, 5.4, 6.2, 5.0, 5.4, 5.4, 5.4, 6.8, 5.2, 7…\n$ numVotes      &lt;dbl&gt; 2096, 283, 2104, 183, 2839, 197, 889, 2243, 215, 7728, 4…\n\nTWELVE_EP_SERIES &lt;- TITLE_EPISODES |&gt;\n  group_by(parentTconst) |&gt;\n  summarize(episodeCount = n()) |&gt;\n  filter(episodeCount &gt;= 12) |&gt;\n  inner_join(TITLE_RATINGS,c(\"parentTconst\" = \"tconst\")) |&gt;\n  left_join(TITLE_BASICS,c(\"parentTconst\" = \"tconst\")) |&gt;\n  select(\n    seriesID = `parentTconst`,\n    `primaryTitle`,\n    `startYear`,\n    `endYear`,\n    `episodeCount`,\n    `averageRating`,\n    `numVotes`\n  ) |&gt;\n  arrange(desc(averageRating), desc(episodeCount), desc(numVotes)) |&gt;\n  slice_head(n=5)\n\n\nTWELVE_EP_SERIES\n\n# A tibble: 5 × 7\n  seriesID   primaryTitle  startYear endYear episodeCount averageRating numVotes\n  &lt;chr&gt;      &lt;chr&gt;             &lt;dbl&gt;   &lt;dbl&gt;        &lt;int&gt;         &lt;dbl&gt;    &lt;dbl&gt;\n1 tt15613780 Craft Games        2014      NA          318           9.7      150\n2 tt8560108  Prime Time         2016      NA          212           9.7      181\n3 tt21989170 Gumbino            2016      NA          148           9.7      343\n4 tt7151672  Choufli Hal        2005    2009          134           9.7     2930\n5 tt23028046 Jogandofodda…      2019    2021          101           9.7      168\n\n\nNo clue what these shows are\n\n#2.6: The TV Series Happy Days (1974-1984) gives us the common idiom \"jump the shark\". The phrase comes from\n# a controversial fifth season episode (aired in 1977) in which a lead character literally jumped over a shark on\n# water skis. Idiomatically, it is used to refer to the moment when a once-great show becomes ridiculous and\n# rapidly loses quality. Is it true that episodes from later seasons of Happy Days have lower\n# average ratings than the early seasons?\n\n# First find the ID for Happy Days\n\nTITLE_BASICS |&gt; filter(primaryTitle == \"Happy Days\",startYear==1974,endYear==1984) |&gt; select(`tconst`,`titleType`,`primaryTitle`)\n\n     tconst titleType primaryTitle\n1 tt0070992  tvSeries   Happy Days\n\nglimpse(TITLE_EPISODES)\n\nRows: 3,023,489\nColumns: 4\n$ tconst        &lt;chr&gt; \"tt0045960\", \"tt0046855\", \"tt0048378\", \"tt0048562\", \"tt0…\n$ parentTconst  &lt;chr&gt; \"tt0044284\", \"tt0046643\", \"tt0047702\", \"tt0047768\", \"tt0…\n$ seasonNumber  &lt;dbl&gt; 2, 1, 1, 1, 1, 1, 1, 1, 1, 3, 3, 1, 8, 1, 10, 6, 2, 8, 4…\n$ episodeNumber &lt;dbl&gt; 3, 4, 6, 10, 4, 20, 5, 2, 20, 6, 2, 3, 2, 10, 17, 5, 1, …\n\nHAPPY_DAYS &lt;- TITLE_EPISODES |&gt;\n  filter(parentTconst==\"tt0070992\") |&gt;\n  left_join(TITLE_RATINGS,c(\"tconst\" = \"tconst\")) |&gt;\n  select(\n    -`numVotes`,\n    -`parentTconst`,\n    -`tconst`\n    ) |&gt;\n  group_by(seasonNumber) |&gt;\n  summarize(avgRating = mean(averageRating,na.rm = TRUE))\n\nHAPPY_DAYS\n\n# A tibble: 11 × 2\n   seasonNumber avgRating\n          &lt;dbl&gt;     &lt;dbl&gt;\n 1            1      7.58\n 2            2      7.69\n 3            3      7.7 \n 4            4      7.43\n 5            5      7   \n 6            6      7.02\n 7            7      6.33\n 8            8      5.3 \n 9            9      6.4 \n10           10      6.7 \n11           11      7.33\n\nmin_point &lt;- HAPPY_DAYS[which.min(HAPPY_DAYS$avgRating), ]\nmax_point &lt;- HAPPY_DAYS[which.max(HAPPY_DAYS$avgRating), ]\nsharkjump &lt;- HAPPY_DAYS[HAPPY_DAYS$seasonNumber == 5, ]\n\nhighlighted_points &lt;- factor(c(\"Lowest Rating\", \"Highest Rating\", \"Jumped Shark\"),\n                             levels = c(\"Lowest Rating\", \"Highest Rating\", \"Jumped Shark\"))  # Set the order here\n\n\n# Plot ratings over time\nggplot(HAPPY_DAYS, aes(x = seasonNumber, y = avgRating)) + \n  geom_line(size=1) +\n  geom_point(color = \"#D35400\",size=2) +\n  \n  # Add custom points for min, max, and season 5\n  geom_point(data = min_point, aes(color = highlighted_points[1]), size = 3) +\n  geom_point(data = max_point, aes(color = highlighted_points[2]), size = 3) +\n  geom_point(data = sharkjump, aes(color = highlighted_points[3]), size = 3) +\n  \n  # Add labels and formatting\n  labs(title = \"Happy Days Average Rating by Season\", x = \"Season\", y = \"Average Rating\") +\n  \n  # Customize ticks for x and y axes\n  scale_x_continuous(breaks = seq(min(HAPPY_DAYS$seasonNumber), max(HAPPY_DAYS$seasonNumber), by = 1)) +\n  scale_y_continuous(labels = label_number(), breaks = seq(floor(min(HAPPY_DAYS$avgRating)), ceiling(max(HAPPY_DAYS$avgRating)), by = 0.5)) +\n  \n  # Manually define colors for the highlighted points\n  scale_color_manual(\n    values = c(\"Lowest Rating\" = \"blue\", \"Highest Rating\" = \"red\", \"Jumped Shark\" = \"green\"),\n    name = \"\"\n  ) +\n  \n  theme_minimal() +\n  theme(\n    plot.title = element_text(hjust = 0.5, size = 16, face = \"bold\"), \n    axis.title.x = element_text(size = 14),  \n    axis.title.y = element_text(size = 14),  \n    axis.text = element_text(size = 12),  \n    # panel.grid.minor = element_blank(),  \n    legend.position = \"right\",  # Position the legend on the right\n    legend.text = element_text(face = \"bold\", size = 8),\n    \n    # Set the background colors\n    panel.background = element_rect(fill = \"gray90\"),  # Gray background for the plot area\n    plot.background = element_rect(fill = \"gray90\"),  # Gray background for the entire plot\n    \n    # Enhance axis lines\n    axis.line = element_line(color = \"black\", size = 1.2),  # Change color and thickness of axis lines\n    axis.ticks = element_line(color = \"black\", size = 1),  # Change color and thickness of tick marks\n    axis.ticks.length = unit(0.25, \"cm\"),  # Adjust length of tick marks\n    \n    # Enhance gridlines\n    panel.grid.major = element_line(color = \"gray60\", size = 0.5),  # Change color and thickness of major gridlines\n    panel.grid.minor = element_line(color = \"gray60\", size = 0.5)   # Change color and thickness of minor gridlines\n  )\n\n\n\n\n\n\n\n\nAs we can see, the shark-jump likely caused an immediate dip in viewership, but it rebounded for the final 3 seasons and went out near the height of its popularity\n\n\nTask 3: What is success?\nHere we create a “success” metric to determine whether or not a film meets our own standards.\nFirst let’s define success. We want to look at two features: * Average Rating * Num Votes Other features of note could be * Crew Size * Run Time\n\n# First let's just get only movie data from 1960 onwards\nMOVIES &lt;- TITLE_BASICS |&gt;\n  filter(titleType == \"movie\",startYear &gt;= 1960)\n\n# Add in ratings\nMOVIES &lt;- MOVIES |&gt;\n  left_join(TITLE_RATINGS, c(\"tconst\" = \"tconst\")) |&gt;\n  select(\n    `tconst`,\n    `primaryTitle`,\n    `isAdult`,\n    releaseYear = `startYear`,\n    `runtimeMinutes`,\n    `genres`,\n    `averageRating`,\n    `numVotes`\n  )\n\n# Add in crew size\nCREWS &lt;- TITLE_PRINCIPALS |&gt;\n  group_by(tconst) |&gt;\n  summarize(castCount = n())\n\nMOVIES &lt;- MOVIES |&gt;\n  left_join(CREWS, c(\"tconst\" = \"tconst\"))\n\n# Count the number of genres in the 'genres' column\nGENRE_COUNT &lt;- MOVIES |&gt;\n  separate_longer_delim(genres, delim = \",\") |&gt;  # Split into multiple rows by delimiter\n  group_by(tconst) |&gt;                               # Group by title to keep track of original rows\n  summarise(genre_count = n(), .groups = 'drop')  # Count the number of genres\n\n\n# Join back to the original MOVIES dataframe if needed\nMOVIES &lt;- MOVIES |&gt;\n  left_join(GENRE_COUNT, by = \"tconst\")\n\n# summary stats\ndescribe(MOVIES)\n\n               vars      n     mean       sd  median  trimmed      mad  min\ntconst*           1 118505 59253.00 34209.59 59253.0 59253.00 43923.51    1\nprimaryTitle*     2 118505 53767.12 30890.58 53903.0 53812.98 39907.14    1\nisAdult           3 118505     0.01     0.09     0.0     0.00     0.00    0\nreleaseYear       4 118505  2004.03    16.86  2010.0  2006.16    13.34 1960\nruntimeMinutes    5 116399   101.65   202.99    96.0    98.24    14.83   17\ngenres*           6 118505   579.73   274.72   633.0   599.44   201.63    1\naverageRating     7 118505     5.88     1.32     6.1     5.95     1.19    1\nnumVotes          8 118505  9392.56 58913.55   473.0  1139.48   498.15  100\ncastCount         9 114101    18.47     4.11    19.0    18.70     2.97    1\ngenre_count      10 118505     2.00     0.83     2.0     2.00     1.48    1\n                   max   range   skew kurtosis     se\ntconst*         118505  118504   0.00    -1.20  99.38\nprimaryTitle*   107056  107055  -0.01    -1.21  89.73\nisAdult              1       1  10.77   113.99   0.00\nreleaseYear       2024      64  -0.94    -0.17   0.05\nruntimeMinutes   51420   51403 224.22 52765.55   0.59\ngenres*           1010    1009  -0.66    -0.48   0.80\naverageRating       10       9  -0.52     0.17   0.00\nnumVotes       2952383 2952283  17.20   456.62 171.14\ncastCount           57      56  -0.44     2.86   0.01\ngenre_count          3       2   0.00    -1.55   0.00\n\n# 90% of movies fall between an average rating of 3.4 and 7.7\nquantile(MOVIES$averageRating,.05)\n\n 5% \n3.4 \n\nquantile(MOVIES$averageRating,.95)\n\n95% \n7.7 \n\n# We can use this to determine both what makes a great move and what makes a flop\n\nFLOPS &lt;- MOVIES |&gt;\n  filter(averageRating &lt;= 3.4)\n\nSUCCESSES &lt;- MOVIES |&gt;\n  filter(averageRating &gt;= 7.7)\n\ndescribe(FLOPS)\n\n               vars    n    mean      sd median trimmed     mad  min      max\ntconst*           1 6162 3081.50 1778.96 3081.5 3081.50 2283.95    1   6162.0\nprimaryTitle*     2 6162 3055.68 1762.50 3054.5 3056.01 2261.71    1   6107.0\nisAdult           3 6162    0.00    0.05    0.0    0.00    0.00    0      1.0\nreleaseYear       4 6162 2010.13   12.33 2013.0 2012.26    8.90 1960   2024.0\nruntimeMinutes    5 5952   98.85  559.05   89.0   89.42   10.38   26  43200.0\ngenres*           6 6162  226.28  128.67  239.0  233.78  170.50    1    396.0\naverageRating     7 6162    2.82    0.52    2.9    2.88    0.44    1      3.4\nnumVotes          8 6162 1333.77 6306.58  334.0  468.67  269.83  100 180239.0\ncastCount         9 5886   18.30    3.86   18.0   18.36    2.97    1     49.0\ngenre_count      10 6162    1.94    0.84    2.0    1.92    1.48    1      3.0\n                  range  skew kurtosis    se\ntconst*          6161.0  0.00    -1.20 22.66\nprimaryTitle*    6106.0  0.00    -1.20 22.45\nisAdult             1.0 20.90   435.00  0.00\nreleaseYear        64.0 -1.67     2.81  0.16\nruntimeMinutes  43174.0 76.99  5933.03  7.25\ngenres*           395.0 -0.36    -1.27  1.64\naverageRating       2.4 -1.09     0.74  0.01\nnumVotes       180139.0 14.03   256.60 80.34\ncastCount          48.0  0.03     3.71  0.05\ngenre_count         2.0  0.12    -1.58  0.01\n\ndescribe(SUCCESSES)\n\n               vars    n     mean        sd median trimmed     mad    min\ntconst*           1 7224  3612.50   2085.53 3612.5 3612.50 2677.58    1.0\nprimaryTitle*     2 7224  3574.23   2063.38 3573.5 3573.97 2651.63    1.0\nisAdult           3 7224     0.00      0.05    0.0    0.00    0.00    0.0\nreleaseYear       4 7224  2004.91     17.78 2011.0 2007.24   14.83 1960.0\nruntimeMinutes    5 6930   115.03     42.59  109.0  111.80   31.13   17.0\ngenres*           6 7224   261.63    111.20  295.0  272.18   94.89    1.0\naverageRating     7 7224     8.10      0.42    8.0    8.03    0.30    7.7\nnumVotes          8 7224 44528.35 188879.33  699.0 3525.70  856.94  100.0\ncastCount         9 6892    16.43      5.12   17.0   16.71    4.45    1.0\ngenre_count      10 7224     1.90      0.84    2.0    1.88    1.48    1.0\n                   max     range  skew kurtosis      se\ntconst*           7224    7223.0  0.00    -1.20   24.54\nprimaryTitle*     7150    7149.0  0.00    -1.20   24.28\nisAdult              1       1.0 21.17   446.38    0.00\nreleaseYear       2024      64.0 -0.93    -0.26    0.21\nruntimeMinutes    1440    1423.0  6.95   157.15    0.51\ngenres*            446     445.0 -0.79    -0.15    1.31\naverageRating       10       2.3  1.51     2.30    0.00\nnumVotes       2952383 2952283.0  6.83    59.67 2222.26\ncastCount           38      37.0 -0.43     0.53    0.06\ngenre_count          3       2.0  0.18    -1.55    0.01\n\n# Successes seem to be longer on average but also confined to a range of 1,440 minutes runtime while flops get a little silly\n# A lot more people vote for successes (surprising because you'd think people are more likely to respond if they dislike something than if they like it)\n# https://www.nationalstrategic.com/why-would-they-write-that-the-psychology-of-customer-reviews/\n\n# The number of genres used seem to not matter pretty much at all\n\nMode &lt;- function(x) {\n  ux &lt;- unique(x)\n  ux[which.max(tabulate(match(x, ux)))]\n}\n\nMode(SUCCESSES$genres)\n\n[1] \"Documentary\"\n\nMode(FLOPS$genres)\n\n[1] \"Horror\"\n\nhead(sort(desc(table(SUCCESSES$genres))),n=20)\n\n\n                  Documentary                         Drama \n                        -1083                         -1040 \n                       Comedy                  Comedy,Drama \n                         -289                          -248 \n            Documentary,Music                 Drama,Romance \n                         -241                          -205 \n        Biography,Documentary          Comedy,Drama,Romance \n                         -119                          -112 \n           Action,Crime,Drama             Documentary,Sport \n                         -105                          -105 \n          Documentary,History                      Thriller \n                          -96                           -90 \n         Crime,Drama,Thriller   Biography,Documentary,Music \n                          -81                           -79 \n               Drama,Thriller                   Crime,Drama \n                          -79                           -77 \n                 Drama,Family                           \\\\N \n                          -76                           -70 \nBiography,Documentary,History                     Drama,War \n                          -66                           -65 \n\nhead(sort(desc(table(FLOPS$genres))),n=20)\n\n\n                 Horror                  Comedy         Horror,Thriller \n                   -956                    -598                    -334 \n                  Drama                Thriller                  Action \n                   -199                    -156                    -150 \n          Comedy,Horror            Comedy,Drama Horror,Mystery,Thriller \n                   -135                     -88                     -87 \n          Horror,Sci-Fi                  Sci-Fi Action,Adventure,Comedy \n                    -84                     -84                     -76 \n   Drama,Horror,Mystery           Action,Sci-Fi          Comedy,Romance \n                    -74                     -73                     -73 \n  Drama,Horror,Thriller      Action,Crime,Drama             Documentary \n                    -70                     -67                     -65 \n           Action,Drama         Action,Thriller \n                    -64                     -62 \n\ntable(SUCCESSES$isAdult)\n\n\n   0    1 \n7208   16 \n\ntable(FLOPS$isAdult)\n\n\n   0    1 \n6148   14 \n\n# no effect\n\nDocumentaries and Dramas are successfull while Horror is not. Comedy can go either way.\nMetrics for success: * Good genre (Drama, Documentary) * High number of votes (&gt; 500) * Runtime between 70 minutes and 150 minutes. Dock points for each STD outside of that Metrics for flop: * Bad genre (Horror, Comedy) * Low number of votes (&lt;= 500) * Runtime greater than 200 minutes\n\n# Define the metric for success function\nmetric_for_success &lt;- function(df) {\n  df &lt;- df |&gt;\n    mutate(\n      # Calculate positive contributions\n      positive_metric = ifelse(str_detect(genres, \"Drama|Documentary\"), 0.2, 0) +\n        ifelse(numVotes &gt;= 500, 0.4, 0) +\n        ifelse(runtimeMinutes &gt;= 70 & runtimeMinutes &lt;= 150, 0.4, 0),\n      \n      # Calculate negative contributions\n      negative_metric = ifelse(str_detect(genres, \"Horror|Comedy\"), -0.4, 0) +\n        ifelse(numVotes &lt; 500 | is.na(numVotes), -0.3, 0) +\n        ifelse(runtimeMinutes &gt; 200, -pmin(0.5, (runtimeMinutes - 200) / 90), 0),\n      \n      # Combine the positive and negative contributions\n      metric = positive_metric + negative_metric,\n      \n      # Bound the metric between -1 and 1\n      metric = pmin(pmax(metric, -1), 1),\n      \n      # Round the metric to 3 decimal places\n      metric = round(metric, 3)\n    ) |&gt;\n    # Drop the intermediate columns (optional)\n    select(-positive_metric, -negative_metric)\n  \n  return(df)\n}\n\n#Apply the metric function to the DataFrame\nMOVIES &lt;- metric_for_success(MOVIES)\n\ntable(MOVIES$metric)\n\n\n    -1 -0.944   -0.8 -0.767 -0.722   -0.7 -0.611   -0.6 -0.567 -0.544 -0.533 \n     9      1      8      1      1    642      1     59      1      5      1 \n  -0.5 -0.478 -0.467 -0.444 -0.433 -0.411   -0.4 -0.389 -0.378 -0.367 -0.356 \n   293      2      1      1      1      2      3      1      2      2      3 \n-0.344 -0.333 -0.322 -0.311   -0.3 -0.289 -0.278 -0.267 -0.256 -0.244 -0.233 \n     1      2      5      2  15056      1      2      2      1      1      1 \n-0.222 -0.211 -0.189 -0.167 -0.144 -0.122 -0.111   -0.1 -0.067 -0.056 -0.033 \n     1      9      3      2      1      1      5   8398      2      1      1 \n-0.022      0  0.022  0.067    0.1  0.111  0.133  0.156  0.167  0.178  0.189 \n     1    420      1      1   7901      1      2      4      1      4      2 \n   0.2  0.211  0.233  0.244  0.256  0.267  0.278    0.3  0.311  0.322  0.333 \n   467      1      1      2      1      2      1  26557      2      2      1 \n 0.344  0.367  0.378  0.389    0.4  0.411  0.422  0.433  0.444  0.456  0.489 \n     1      1      6      2  16669      4      2      2      2      3      6 \n   0.5  0.511  0.522  0.533  0.544  0.556  0.567  0.578  0.589    0.6    0.8 \n     1      5      2      1      2      1      1      4      3  10527   6349 \n     1 \n 22892 \n\n\n\n#3.1: Choose the top 5-10 movies by my metric to confirm successes\nMOVIES |&gt;\n  filter(metric==1) |&gt;\n  select(\n    -`isAdult`,\n    -`tconst`,\n    -`genre_count`\n  ) |&gt;\n  sample_n(10)\n\n                                 primaryTitle releaseYear runtimeMinutes\n1                      Eve and the Fire Horse        2005             92\n2                              Breaking Point        2009             93\n3                   18×2 Beyond Youthful Days        2024            123\n4                                    Pushkara        2023            123\n5                                       Steel        2015            108\n6                                      6 Days        2017             94\n7                                Midnight Sun        2018             91\n8                                     Peranbu        2018            147\n9                      Return to Peyton Place        1961            123\n10 Casino Jack and the United States of Money        2010            118\n                  genres averageRating numVotes castCount metric\n1                  Drama           6.9      576        22      1\n2     Action,Crime,Drama           4.8      754        21      1\n3          Drama,Romance           7.2     1174        18      1\n4                  Drama           8.9      544        20      1\n5  Drama,Mystery,Romance           5.5     1021        20      1\n6   Action,Drama,History           6.2    25182        24      1\n7          Drama,Romance           6.6    37270        23      1\n8           Drama,Family           8.7    16835        17      1\n9                  Drama           5.9     1021        17      1\n10           Documentary           7.1     1746        18      1\n\n# This metric works really well in conjunction with a high number of votes\nMOVIES |&gt;\n  arrange(desc(metric),desc(numVotes)) |&gt;\n  slice_head(n=10)\n\n      tconst             primaryTitle isAdult releaseYear runtimeMinutes\n1  tt0111161 The Shawshank Redemption       0        1994            142\n2  tt0137523               Fight Club       0        1999            139\n3  tt0109830             Forrest Gump       0        1994            142\n4  tt0114369                    Se7en       0        1995            127\n5  tt0372784            Batman Begins       0        2005            140\n6  tt0102926 The Silence of the Lambs       0        1991            118\n7  tt7286456                    Joker       0        2019            122\n8  tt1130884           Shutter Island       0        2010            138\n9  tt0482571             The Prestige       0        2006            130\n10 tt0099685               Goodfellas       0        1990            145\n                   genres averageRating numVotes castCount genre_count metric\n1                   Drama           9.3  2952383        19           1      1\n2                   Drama           8.8  2384372        23           1      1\n3           Drama,Romance           8.8  2309923        21           2      1\n4     Crime,Drama,Mystery           8.6  1843387        21           3      1\n5      Action,Crime,Drama           8.2  1607729        26           3      1\n6    Crime,Drama,Thriller           8.6  1583671        21           3      1\n7    Crime,Drama,Thriller           8.4  1548918        23           3      1\n8  Drama,Mystery,Thriller           8.2  1496563        21           3      1\n9    Drama,Mystery,Sci-Fi           8.5  1471339        22           3      1\n10  Biography,Crime,Drama           8.7  1285009        19           3      1\n\n\n\n#3.2: Choose 3-5  movies with large numbers of IMDb votes that socre poorly on your success metric and confirm\n# that they are indeed low quality\nMOVIES |&gt;\n  arrange(metric, desc(numVotes)) |&gt;\n  select(`primaryTitle`,\n         `releaseYear`,\n         `numVotes`,\n         `averageRating`,\n         `genres`,\n         `metric`) |&gt;\n  slice_head(n=5)\n\n                               primaryTitle releaseYear numVotes averageRating\n1                            Out 1: Spectre        1972      437           7.2\n2 Three Mirrors Creature's Flashes of Flesh        2023      422           7.8\n3                       The Cremaster Cycle        2003      306           6.9\n4                         Haripada Bandwala        2016      290           4.4\n5                            The Movie Orgy        2009      211           7.8\n                      genres metric\n1      Comedy,Drama,Thriller     -1\n2        Drama,Horror,Sci-Fi     -1\n3       Drama,Fantasy,Horror     -1\n4             Comedy,Romance     -1\n5 Comedy,Documentary,History     -1\n\n\nI didn’t need a personal metric to tell me that these 5 movies suck\n\n#3.3 Choose a prestige actor or director and confirm that they have many projects with high scores on your success metric.\nNAME_BASICS |&gt;\n  filter(primaryName == \"Stanley Kubrick\") |&gt;\n  separate_longer_delim(knownForTitles, delim = \",\") |&gt;\n  inner_join(MOVIES, by = c(\"knownForTitles\" = \"tconst\")) |&gt;\n  select(\n    `primaryName`,\n    `primaryTitle`,\n    `averageRating`,\n    `numVotes`,\n    `genres`,\n    `runtimeMinutes`,\n    `metric`\n         )\n\n      primaryName          primaryTitle averageRating numVotes\n1 Stanley Kubrick 2001: A Space Odyssey           8.3   733226\n2 Stanley Kubrick    A Clockwork Orange           8.2   894278\n3 Stanley Kubrick          Barry Lyndon           8.1   187061\n4 Stanley Kubrick     Full Metal Jacket           8.2   804176\n               genres runtimeMinutes metric\n1    Adventure,Sci-Fi            149    0.8\n2        Crime,Sci-Fi            136    0.8\n3 Adventure,Drama,War            185    0.6\n4           Drama,War            116    1.0\n\n\nPretty good\n\n#3.4 Perform at least one other \"spot check\" validation\n\ncounts &lt;- MOVIES %&gt;%\n  summarize(\n    above_7_5_high_metric = sum(averageRating &gt; 7.5 & metric &gt;= 0.6, na.rm = TRUE),\n    between_5_and_7_5_high_metric = sum(averageRating &gt;= 5 & averageRating &lt;= 7.5 & metric &gt;= 0.6, na.rm = TRUE),\n    below_5_high_metric = sum(averageRating &lt; 5 & metric &gt;= 0.6, na.rm = TRUE),\n    above_5_and_7_5_low_metric = sum(averageRating &gt; 7.5 & metric &lt;= 0.3, na.rm = TRUE),\n    between_5_and_7_5_low_metric = sum(averageRating &gt;= 5 & averageRating &lt;= 7.5 & metric &lt;= 0.3, na.rm = TRUE),\n    below_5_low_metric = sum(averageRating &lt; 5 & metric &lt;= 0.3, na.rm = TRUE)\n  )\n\ncounts\n\n  above_7_5_high_metric between_5_and_7_5_high_metric below_5_high_metric\n1                  4229                         30767                4772\n  above_5_and_7_5_low_metric between_5_and_7_5_low_metric below_5_low_metric\n1                       3766                        39965              16177\n\n\nAlthough the metric is imperfect, it is pretty good at telling us what’s good and what’s not (based on average ratings)\n\n#3.5: Come up with a numerical threshold for a project to be a ‘success’; that is, determine a value such that movies above `v` are all “solid” or better.\n\nv &lt;- 0.6\n\n\n\nTask 4: What makes a good movie?\n\n# Juuuust incase\navgrtgthrsh &lt;- 6.0\n\n\n# Create a new column indicating success based on averageRating\nMOVIES &lt;- MOVIES |&gt;\n  mutate(success_averageRating = ifelse(averageRating &gt;= avgrtgthrsh, 1, 0),\n         success_metric = ifelse(metric &gt;= v, 1, 0)) |&gt;\n  mutate(decade = floor(releaseYear / 10) * 10)\n\nMOVIES_GENRES &lt;- MOVIES |&gt;\n  filter(genres != \"\\\\N\", averageRating != \"\\\\N\") |&gt;\n  separate_longer_delim(genres, delim = \",\") |&gt;\n  mutate(genres = trimws(genres)) |&gt;\n  mutate(decade = floor(releaseYear / 10) * 10)\n\n# Calculate total films by genre and decade\ntotal_films_by_genre &lt;- MOVIES_GENRES |&gt;\n  group_by(decade, genres) |&gt;\n  summarize(total_count = n(), .groups = \"drop\")\n\n# Filter genres by count\npopular_genres &lt;- total_films_by_genre |&gt;\n  filter(total_count &gt; 5000) |&gt;\n  select(genres) |&gt;\n  distinct()\n\n# Count successes for averageRating (for popular genres)\nsuccess_by_genre_rating_popular &lt;- MOVIES_GENRES |&gt;\n  filter(genres %in% popular_genres$genres) |&gt;\n  group_by(decade, genres) |&gt;\n  summarize(success_count = sum(success_averageRating, na.rm = TRUE), .groups = \"drop\") |&gt;\n  left_join(total_films_by_genre, by = c(\"decade\", \"genres\")) |&gt;\n  mutate(success_rate = success_count / total_count * 100) |&gt;\n  arrange(decade, desc(success_rate))\n\n# Count successes for metric (for popular genres)\nsuccess_by_genre_metric_popular &lt;- MOVIES_GENRES |&gt;\n  filter(genres %in% popular_genres$genres) |&gt;\n  group_by(decade, genres) |&gt;\n  summarize(success_count = sum(success_metric, na.rm = TRUE), .groups = \"drop\") |&gt;\n  left_join(total_films_by_genre, by = c(\"decade\", \"genres\")) |&gt;\n  mutate(success_rate = success_count / total_count * 100) |&gt;\n  arrange(decade, desc(success_rate))\n\n# Count successes for averageRating (for less popular genres)\nsuccess_by_genre_rating_less &lt;- MOVIES_GENRES |&gt;\n  filter(!(genres %in% popular_genres$genres)) |&gt;\n  group_by(decade, genres) |&gt;\n  summarize(success_count = sum(success_averageRating, na.rm = TRUE), .groups = \"drop\") |&gt;\n  left_join(total_films_by_genre, by = c(\"decade\", \"genres\")) |&gt;\n  mutate(success_rate = success_count / total_count * 100) |&gt;\n  arrange(decade, desc(success_rate))\n\n# Count successes for metric (for less popular genres)\nsuccess_by_genre_metric_less &lt;- MOVIES_GENRES |&gt;\n  filter(!(genres %in% popular_genres$genres)) |&gt;\n  group_by(decade, genres) |&gt;\n  summarize(success_count = sum(success_metric, na.rm = TRUE), .groups = \"drop\") |&gt;\n  left_join(total_films_by_genre, by = c(\"decade\", \"genres\")) |&gt;\n  mutate(success_rate = success_count / total_count * 100) |&gt;\n  arrange(decade, desc(success_rate))\n\n# Plotting Success Rates for Average Rating (Popular Genres)\np1 &lt;- ggplot(success_by_genre_rating_popular, aes(x = decade, y = success_rate, color = genres, group = genres)) +\n  geom_line(size = 1) +  # Add line\n  geom_point(size = 3) +  # Add points for clarity\n  labs(title = \"Success Rates by Genre (Average Rating - Popular Genres)\", x = \"Decade\", y = \"Success Rate (%)\") +\n  scale_y_continuous(limits = c(0, 100)) +  # Set y-axis limits from 0 to 100\n  theme_minimal() +\n  theme(\n    axis.text.x = element_text(angle = 45, hjust = 1),  # Rotate x-axis labels\n    plot.title = element_text(hjust = 0.5)  # Center the title\n  )\n\n# Convert ggplot to plotly for hover functionality\np1_interactive &lt;- ggplotly(p1)\n\n# Plotting Success Rates for Metric (Popular Genres)\np2 &lt;- ggplot(success_by_genre_metric_popular, aes(x = decade, y = success_rate, color = genres, group = genres)) +\n  geom_line(size = 1) +  # Add line\n  geom_point(size = 3) +  # Add points for clarity\n  labs(title = \"Success Rates by Genre (Metric - Popular Genres)\", x = \"Decade\", y = \"Success Rate (%)\") +\n  scale_y_continuous(limits = c(0, 100)) +  # Set y-axis limits from 0 to 100\n  theme_minimal() +\n  theme(\n    axis.text.x = element_text(angle = 45, hjust = 1),  # Rotate x-axis labels\n    plot.title = element_text(hjust = 0.5)  # Center the title\n  )\n\n# Convert ggplot to plotly for hover functionality\np2_interactive &lt;- ggplotly(p2)\n\n# Plotting Success Rates for Average Rating (Less Popular Genres)\np3 &lt;- ggplot(success_by_genre_rating_less, aes(x = decade, y = success_rate, color = genres, group = genres)) +\n  geom_line(size = 1) +  # Add line\n  geom_point(size = 3) +  # Add points for clarity\n  labs(title = \"Success Rates by Genre (Average Rating - Less Popular Genres)\", x = \"Decade\", y = \"Success Rate (%)\") +\n  scale_y_continuous(limits = c(0, 100)) +  # Set y-axis limits from 0 to 100\n  theme_minimal() +\n  theme(\n    axis.text.x = element_text(angle = 45, hjust = 1),  # Rotate x-axis labels\n    plot.title = element_text(hjust = 0.5)  # Center the title\n  )\n\n# Convert ggplot to plotly for hover functionality\np3_interactive &lt;- ggplotly(p3)\n\n# Plotting Success Rates for Metric (Less Popular Genres)\np4 &lt;- ggplot(success_by_genre_metric_less, aes(x = decade, y = success_rate, color = genres, group = genres)) +\n  geom_line(size = 1) +  # Add line\n  geom_point(size = 3) +  # Add points for clarity\n  labs(title = \"Success Rates by Genre (Metric - Less Popular Genres)\", x = \"Decade\", y = \"Success Rate (%)\") +\n  scale_y_continuous(limits = c(0, 100)) +  # Set y-axis limits from 0 to 100\n  theme_minimal() +\n  theme(\n    axis.text.x = element_text(angle = 45, hjust = 1),  # Rotate x-axis labels\n    plot.title = element_text(hjust = 0.5)  # Center the title\n  )\n\n# Convert ggplot to plotly for hover functionality\np4_interactive &lt;- ggplotly(p4)\n\n\np1_interactive\n\n\n\n\np2_interactive\n\n\n\n\np3_interactive\n\n\n\n\np4_interactive\n\n\n\n\n\nThey’re interactive!\n\n#4.1: Which genre has the most \"successs\" in each decade\"?\n\n\n# Count successes for averageRating\nsuccess_by_genre_rating &lt;- MOVIES_GENRES |&gt;\n  group_by(decade, genres) |&gt;\n  summarize(success_count = sum(success_averageRating, na.rm = TRUE), .groups = \"drop\") |&gt;\n  arrange(decade, desc(success_count))\n\n# Count successes for metric\nsuccess_by_genre_metric &lt;- MOVIES_GENRES |&gt;\n  group_by(decade, genres) |&gt;\n  summarize(success_count = sum(success_metric, na.rm = TRUE), .groups = \"drop\") |&gt;\n  arrange(decade, desc(success_count))\n\n# Identify the genre with the most successes for each decade (Average Rating)\nmost_successful_genre_rating &lt;- success_by_genre_rating |&gt;\n  group_by(decade) |&gt;\n  slice_max(success_count, n = 2) |&gt;\n  ungroup()\n\n# Identify the genre with the most successes for each decade (Metric)\nmost_successful_genre_metric &lt;- success_by_genre_metric |&gt;\n  group_by(decade) |&gt;\n  slice_max(success_count, n = 2) |&gt;\n  ungroup()\n\nmost_successful_genre_rating\n\n# A tibble: 14 × 3\n   decade genres      success_count\n    &lt;dbl&gt; &lt;chr&gt;               &lt;dbl&gt;\n 1   1960 Drama                2567\n 2   1960 Comedy               1287\n 3   1970 Drama                2990\n 4   1970 Comedy               1318\n 5   1980 Drama                3220\n 6   1980 Comedy               1783\n 7   1990 Drama                4170\n 8   1990 Comedy               2184\n 9   2000 Drama                7339\n10   2000 Comedy               3325\n11   2010 Drama               11449\n12   2010 Documentary          5084\n13   2020 Drama                5103\n14   2020 Comedy               2174\n\nmost_successful_genre_metric\n\n# A tibble: 15 × 3\n   decade genres    success_count\n    &lt;dbl&gt; &lt;chr&gt;             &lt;dbl&gt;\n 1   1960 Drama              1526\n 2   1960 Adventure           308\n 3   1960 Romance             308\n 4   1970 Drama              1890\n 5   1970 Crime               517\n 6   1980 Drama              2083\n 7   1980 Action              600\n 8   1990 Drama              3258\n 9   1990 Comedy              888\n10   2000 Drama              6342\n11   2000 Comedy             1711\n12   2010 Drama             10358\n13   2010 Action             2553\n14   2020 Drama              4501\n15   2020 Thriller           1319\n\n\nDrama and Action films are pretty succesfull!\n\n#4.2 Which genre consistently has the most \"successes\"? Which genre used to reliably produce \"successes\" and has fallen out of favor?\np1_interactive\n\n\n\n\np2_interactive\n\n\n\n\n\nDocumentaries have the most consistent successes.\nHorror used to produce a lot of successes but has been on a downward trend each decade.\n\n#4.3: What genre has produced the most “successes” since 2010?\n#Does it have the highest success rate or does it only have a large number of successes because there are many productions in that genre?\np1_interactive\n\n\n\n\np2_interactive\n\n\n\n\nmost_successful_genre_rating\n\n# A tibble: 14 × 3\n   decade genres      success_count\n    &lt;dbl&gt; &lt;chr&gt;               &lt;dbl&gt;\n 1   1960 Drama                2567\n 2   1960 Comedy               1287\n 3   1970 Drama                2990\n 4   1970 Comedy               1318\n 5   1980 Drama                3220\n 6   1980 Comedy               1783\n 7   1990 Drama                4170\n 8   1990 Comedy               2184\n 9   2000 Drama                7339\n10   2000 Comedy               3325\n11   2010 Drama               11449\n12   2010 Documentary          5084\n13   2020 Drama                5103\n14   2020 Comedy               2174\n\nmost_successful_genre_metric\n\n# A tibble: 15 × 3\n   decade genres    success_count\n    &lt;dbl&gt; &lt;chr&gt;             &lt;dbl&gt;\n 1   1960 Drama              1526\n 2   1960 Adventure           308\n 3   1960 Romance             308\n 4   1970 Drama              1890\n 5   1970 Crime               517\n 6   1980 Drama              2083\n 7   1980 Action              600\n 8   1990 Drama              3258\n 9   1990 Comedy              888\n10   2000 Drama              6342\n11   2000 Comedy             1711\n12   2010 Drama             10358\n13   2010 Action             2553\n14   2020 Drama              4501\n15   2020 Thriller           1319\n\n\nDrama seems to be the answer to both of these\n\n#4.4: What genre has become more popular in recent years?\n\np3_interactive\n\n\n\n\np4_interactive\n\n\n\n\n\nAction movies\n\n\nTask 5: Identifying the Crew\nHang on to your hats because there’s about to be a lot of data manipulation.\nBasically, we’re going to whittle down the list of actors and directors until we find a group that matches what we’re looking for in producing the next box-office smash hit.\n\n#Filter TITLE_BASICS based on metric threshold and genre\nFILTERED_MOVIES &lt;- MOVIES |&gt;\n  separate_longer_delim(genres, delim = \",\") |&gt;\n  filter(success_metric == 1, genres %in% c(\"Action\", \"Drama\", \"Thriller\", \"Documentary\")) |&gt;\n  group_by(tconst) |&gt;\n  summarize(\n    title = first(primaryTitle), # Adjust according to your dataset\n    year = first(releaseYear), # Adjust according to your dataset\n    metric = first(metric), # Adjust according to your dataset,\n    avgRating = first(averageRating),\n    numVotes,\n    decade = first(decade),\n    castCount = first(castCount),\n    genres = paste(unique(genres), collapse = \", \") # Combine genres into one string\n  )\n\n\nACTORS &lt;- NAME_BASICS |&gt;\n  filter(grepl(\"actor\", primaryProfession, ignore.case = TRUE), is.na(deathYear)) |&gt;\n  separate_longer_delim(primaryProfession, delim = \",\") |&gt;\n  filter(primaryProfession == \"actor\") |&gt;\n  mutate(age = 2024 - birthYear) |&gt;\n  select(-`deathYear`)\n\n# Joining with TITLE_PRINCIPALS\nACTORS_TITLES &lt;- ACTORS |&gt;\n  inner_join(TITLE_PRINCIPALS, by = c(\"nconst\" = \"nconst\")) |&gt;\n  left_join(TITLE_BASICS, by = c(\"tconst\" = \"tconst\")) |&gt;\n  inner_join(FILTERED_MOVIES, by = c(\"tconst\" = \"tconst\")) |&gt;\n  select(\n    `nconst`,\n    `primaryName`,\n    `age`,\n    `tconst`,\n    `primaryTitle`,\n    releaseYear = `startYear`,\n    `decade`,\n    `castCount`,\n    `runtimeMinutes`,\n    genres = `genres.x`,\n    mainGenre = `genres.y`,\n    `metric`,\n    `avgRating`\n  ) |&gt;\n  distinct()\n\nDIRECTORS &lt;- NAME_BASICS |&gt;\n  filter(grepl(\"director\", primaryProfession, ignore.case = TRUE), is.na(deathYear)) |&gt;\n  separate_longer_delim(primaryProfession, delim = \",\") |&gt;\n  filter(primaryProfession == \"director\") |&gt;\n  mutate(age = 2024 - birthYear) |&gt;\n  select(-`deathYear`)\n\n\n# Joining with TITLE_PRINCIPALS\nDIRECTORS_TITLES &lt;- DIRECTORS |&gt;\n  inner_join(TITLE_PRINCIPALS, by = c(\"nconst\" = \"nconst\")) |&gt;\n  left_join(TITLE_BASICS, by = c(\"tconst\" = \"tconst\")) |&gt;\n  inner_join(FILTERED_MOVIES, by = c(\"tconst\" = \"tconst\")) |&gt;\n  select(\n    `nconst`,\n    `primaryName`,\n    `age`,\n    `tconst`,\n    `primaryTitle`,\n    releaseYear = `startYear`,\n    `decade`,\n    `castCount`,\n    `runtimeMinutes`,\n    genres = `genres.x`,\n    mainGenre = `genres.y`,\n    `metric`,\n    `avgRating`\n  ) |&gt;\n  distinct()\n\n# Let's get anyone who's been in a film since at least 2015\nLAST_TEN_YEARS_ACTORS &lt;- ACTORS_TITLES |&gt;\n  filter(releaseYear &gt;= 2015)\n\nLAST_TEN_YEARS_DIRECTORS &lt;- DIRECTORS_TITLES |&gt;\n  filter(releaseYear &gt;= 2015)\n\n# since Action and Drama are the best genres, let's subset to those\n\nBEST_GENRES_ACTORS &lt;- LAST_TEN_YEARS_ACTORS |&gt;\n  filter(mainGenre %in% c(\"Action\", \"Drama\"))\n\nBEST_GENRES_DIRECTORS &lt;- LAST_TEN_YEARS_DIRECTORS |&gt;\n  filter(mainGenre %in% c(\"Action\", \"Drama\"))\n\n# For actors, let's get people who can work with big supporting casts. \n# We don't know if that's what we want, but it'll be nice to have\n\ncast_threshold &lt;- BEST_GENRES_ACTORS |&gt;\n  summarize(threshold = quantile(castCount, 0.95, na.rm = TRUE)) |&gt;\n  pull(threshold)\n\n  \nACTORS_CREWS &lt;- BEST_GENRES_ACTORS |&gt;\n  group_by(nconst) |&gt;\n  summarize(median_castCount = median(castCount, na.rm = TRUE)) |&gt;\n  filter(median_castCount &gt;= cast_threshold) |&gt; # Filter for median castCount in the top 5 percentilE\n  ungroup()\n\nACTORS_CAST &lt;- BEST_GENRES_ACTORS |&gt;\n  inner_join(ACTORS_CREWS, by = c(\"nconst\" = \"nconst\")) |&gt;\n  select(\n    -`median_castCount`\n  ) |&gt;\n  distinct()\n\n# Let's pull their best works only\n  \nBEST_FILMS_ACTORS &lt;- ACTORS_CAST |&gt;\n  group_by(nconst) |&gt;\n  filter(avgRating == max(avgRating, na.rm = TRUE)) |&gt;\n  ungroup()\n\n# For actors, let's narrow it down to actors whos best film is from this decade\n\nCURRENT_BEST_ACTORS &lt;- BEST_FILMS_ACTORS |&gt;\n  filter(decade==2020)\n\n# We'll now whittle down directors. Who can get a runtime in our sweet-spot of 70 to 150 minutes?\n\nfiltered_median_runtime &lt;- BEST_GENRES_DIRECTORS |&gt;\n  group_by(nconst) |&gt;\n  summarize(median_runtime = median(runtimeMinutes, na.rm = TRUE)) |&gt;  # Calculate median runtime\n  filter(median_runtime &gt;= 70 & median_runtime &lt;= 150)  # Filter for median runtime between 70 and 150\n\n# Doing the same but for directors\n\nDIRECTORS_RUNTIME &lt;- BEST_GENRES_DIRECTORS |&gt;\n  inner_join(filtered_median_runtime, by = c(\"nconst\" = \"nconst\"))\n# let's pull their best movies only\n\nBEST_FILMS_DIRECTORS &lt;- DIRECTORS_RUNTIME |&gt;\n  group_by(nconst) |&gt;\n  filter(avgRating == max(avgRating, na.rm = TRUE)) |&gt;\n  ungroup()\n\n\n# Let's remove any director who is also an actor\nNON_ACTOR_DIRECTORS &lt;- BEST_FILMS_DIRECTORS |&gt;\n  anti_join(BEST_FILMS_ACTORS, by = c(\"nconst\" = \"nconst\"))\n\n# For directors, let's narrow it down to actors whos best film is from this decade\nCURRENT_BEST_DIRECTORS &lt;- NON_ACTOR_DIRECTORS |&gt;\n  filter(decade==2020)\n\n\ndim(NON_ACTOR_DIRECTORS)\n\n[1] 15530    14\n\ndim(BEST_FILMS_ACTORS)\n\n[1] 1371   13\n\n\nTaking a quick breather! We just got out data down quite a bit. Let’s keep going.\n\nMOST_POPULAR_ACTORS &lt;- CURRENT_BEST_ACTORS |&gt;\n  left_join(FILTERED_MOVIES, by = c(\"tconst\" = \"tconst\")) |&gt;\n  select(\n    `nconst`,\n    `primaryName`,\n    `age`,\n    `primaryTitle`,\n    `year`,\n    `mainGenre`,\n    avgRating = `avgRating.x`,\n    `numVotes`\n  ) |&gt;\n  arrange(desc(numVotes))\n\n\n# Let's also bring in how many films they've worked on\nACTOR_FILM_CT &lt;- TITLE_PRINCIPALS |&gt;\n  filter(category == \"actor\") |&gt;\n  group_by(nconst) |&gt;\n  summarize(film_count = n())\n\n\nMOST_POPULAR_ACTORS &lt;- MOST_POPULAR_ACTORS |&gt;\n  left_join(ACTOR_FILM_CT, by = c(\"nconst\" = \"nconst\"))\n\nMOST_POPULAR_ACTORS &lt;- MOST_POPULAR_ACTORS |&gt;\n  filter(!is.na(film_count))\n\nhead(MOST_POPULAR_ACTORS)\n\n# A tibble: 6 × 9\n  nconst     primaryName     age primaryTitle  year mainGenre avgRating numVotes\n  &lt;chr&gt;      &lt;chr&gt;         &lt;dbl&gt; &lt;chr&gt;        &lt;dbl&gt; &lt;chr&gt;         &lt;dbl&gt;    &lt;dbl&gt;\n1 nm8188622  Jacob Batalon    28 Spider-Man:…  2021 Action          8.2   910046\n2 nm1069587  Darshan Kuma…    38 The Kashmir…  2022 Drama           8.6   575254\n3 nm12220302 Sourav Verma     NA The Kashmir…  2022 Drama           8.6   575254\n4 nm1282966  O-T Fagbenle     43 Black Widow   2021 Action          6.6   437506\n5 nm0000439  Neil Patrick…    51 The Matrix …  2021 Action          5.6   286445\n6 nm1186373  Adam Sztykiel    46 Black Adam    2022 Action          6.2   282231\n# ℹ 1 more variable: film_count &lt;int&gt;\n\n# Step 1: Join MOST_POPULAR_ACTORS with TITLE_PRINCIPALS to get tconst (movies the actor was part of)\nactor_movies &lt;- MOST_POPULAR_ACTORS |&gt;\n  inner_join(TITLE_PRINCIPALS, by = \"nconst\") |&gt;\n  select(nconst, tconst)\n\n# Step 2: Join actor_movies with MOVIES to get the average rating of each movie\nactor_movie_ratings &lt;- actor_movies |&gt;\n  inner_join(MOVIES, by = \"tconst\") |&gt;\n  select(nconst, tconst, averageRating)\n\n# Step 3: Calculate the average rating for each actor across their movies\nactor_avg_rating &lt;- actor_movie_ratings |&gt;\n  group_by(nconst) |&gt;\n  summarize(avg_rating = mean(averageRating, na.rm = TRUE))\n\n# Step 4: Join the calculated average rating back to MOST_POPULAR_ACTORS\nMOST_POPULAR_ACTORS &lt;- MOST_POPULAR_ACTORS |&gt;\n  left_join(actor_avg_rating, by = \"nconst\")\n\nMOST_POPULAR_ACTORS &lt;- MOST_POPULAR_ACTORS |&gt;\n  select(\n    `nconst`,\n    `primaryName`,\n    `age`,\n    `primaryTitle`,\n    `year`,\n    `mainGenre`,\n    avgMainMovieRating = `avgRating`,\n    `numVotes`,\n    filmCount = `film_count`,\n    avgActorRating = `avg_rating`\n  )\n\nMOST_POPULAR_DIRECTORS &lt;- CURRENT_BEST_DIRECTORS |&gt;\n  left_join(FILTERED_MOVIES, by = c(\"tconst\" = \"tconst\")) |&gt;\n  select(\n    `nconst`,\n    `primaryName`,\n    `age`,\n    `primaryTitle`,\n    `year`,\n    `mainGenre`,\n    avgRating = `avgRating.x`,\n    `numVotes`\n  ) |&gt;\n  arrange(desc(numVotes))\n\n# Let's also bring in how many films they've worked on\nDIRECTOR_FILM_CT &lt;- TITLE_PRINCIPALS |&gt;\n  filter(category == \"director\") |&gt;\n  group_by(nconst) |&gt;\n  summarize(film_count = n())\n\n\nMOST_POPULAR_DIRECTORS &lt;- MOST_POPULAR_DIRECTORS |&gt;\n  left_join(DIRECTOR_FILM_CT, by = c(\"nconst\" = \"nconst\"))\n\nMOST_POPULAR_DIRECTORS &lt;- MOST_POPULAR_DIRECTORS |&gt;\n  filter(!is.na(film_count))\n\n# Step 1: Join MOST_POPULAR_DIRECTORS with TITLE_PRINCIPALS to get tconst (movies the director was part of)\ndirector_movies &lt;- MOST_POPULAR_DIRECTORS |&gt;\n  inner_join(TITLE_PRINCIPALS, by = \"nconst\") |&gt;\n  select(nconst, tconst)\n\n# Step 2: Join director_movies with MOVIES to get the average rating of each movie\ndirector_movies_ratings &lt;- director_movies |&gt;\n  inner_join(MOVIES, by = \"tconst\") |&gt;\n  select(nconst, tconst, averageRating)\n\n# Step 3: Calculate the average rating for each director across their movies\ndirector_avg_rating &lt;- director_movies_ratings |&gt;\n  group_by(nconst) |&gt;\n  summarize(avg_rating = mean(averageRating, na.rm = TRUE))\n\n# Step 4: Join the calculated average rating back to MOST_POPULAR_DIRECTORS\nMOST_POPULAR_DIRECTORS &lt;- MOST_POPULAR_DIRECTORS |&gt;\n  left_join(director_avg_rating, by = \"nconst\")\n\n\n\n\nMOST_POPULAR_DIRECTORS &lt;- MOST_POPULAR_DIRECTORS |&gt;\n  select(\n    `nconst`,\n    `primaryName`,\n    `age`,\n    `primaryTitle`,\n    `year`,\n    `mainGenre`,\n    avgMainMovieRating = `avgRating`,\n    `numVotes`,\n    filmCount = `film_count`,\n    avgDirectorRating = `avg_rating`\n  )\n\n\n# Results!\nhead(MOST_POPULAR_ACTORS)\n\n# A tibble: 6 × 10\n  nconst     primaryName     age primaryTitle  year mainGenre avgMainMovieRating\n  &lt;chr&gt;      &lt;chr&gt;         &lt;dbl&gt; &lt;chr&gt;        &lt;dbl&gt; &lt;chr&gt;                  &lt;dbl&gt;\n1 nm8188622  Jacob Batalon    28 Spider-Man:…  2021 Action                   8.2\n2 nm1069587  Darshan Kuma…    38 The Kashmir…  2022 Drama                    8.6\n3 nm12220302 Sourav Verma     NA The Kashmir…  2022 Drama                    8.6\n4 nm1282966  O-T Fagbenle     43 Black Widow   2021 Action                   6.6\n5 nm0000439  Neil Patrick…    51 The Matrix …  2021 Action                   5.6\n6 nm1186373  Adam Sztykiel    46 Black Adam    2022 Action                   6.2\n# ℹ 3 more variables: numVotes &lt;dbl&gt;, filmCount &lt;int&gt;, avgActorRating &lt;dbl&gt;\n\ndim(MOST_POPULAR_ACTORS)\n\n[1] 474  10\n\nhead(MOST_POPULAR_DIRECTORS)\n\n# A tibble: 6 × 10\n  nconst    primaryName    age primaryTitle    year mainGenre avgMainMovieRating\n  &lt;chr&gt;     &lt;chr&gt;        &lt;dbl&gt; &lt;chr&gt;          &lt;dbl&gt; &lt;chr&gt;                  &lt;dbl&gt;\n1 nm1218281 Jon Watts       43 Spider-Man: N…  2021 Action                   8.2\n2 nm0001282 Tony Goldwyn    64 Oppenheimer     2023 Drama                    8.3\n3 nm1347153 Tyler Perry     55 Don't Look Up   2021 Drama                    7.2\n4 nm0411539 Puneet Issar    65 The Kashmir F…  2022 Drama                    8.6\n5 nm0426059 Rian Johnson    51 Glass Onion     2022 Drama                    7.1\n6 nm0781913 Noah Segan      41 Glass Onion     2022 Drama                    7.1\n# ℹ 3 more variables: numVotes &lt;dbl&gt;, filmCount &lt;int&gt;, avgDirectorRating &lt;dbl&gt;\n\ndim(MOST_POPULAR_DIRECTORS)\n\n[1] 3254   10\n\n\n\n# Identify the directors with the highest values for numVotes, filmcount, and avgDirectorRating\nhighest_votes &lt;- MOST_POPULAR_DIRECTORS |&gt; filter(numVotes == max(numVotes, na.rm = TRUE))\nhighest_film_count &lt;- MOST_POPULAR_DIRECTORS |&gt; filter(filmCount == max(filmCount, na.rm = TRUE))\nhighest_avg_rating &lt;- MOST_POPULAR_DIRECTORS |&gt; filter(avgDirectorRating == max(avgDirectorRating, na.rm = TRUE))\n\n# Combine the labels into one data frame\nlabels_df &lt;- bind_rows(highest_votes, highest_film_count, highest_avg_rating)\n\n# Create the scatter plot\nggplot(MOST_POPULAR_DIRECTORS, aes(x = filmCount, y = numVotes, color = avgDirectorRating)) +\n  \n  geom_point(size = 3) +  # Add points with size 3\n  \n  scale_color_gradient(low = \"blue\", high = \"red\") +  # Color gradient from blue (low) to red (high)\n  \n  scale_y_continuous(labels = scales::comma, limits = c(0, 500000)) +  # Adjust y-axis to max at 500,000\n  \n  labs(\n    title = \"Scatter Plot of Directors' Film Count vs Number of Votes\",\n    x = \"Film Count\",\n    y = \"Number of Votes\",\n    color = \"Avg Director Rating\"  # Label for the color legend\n  ) +\n  \n  geom_text(data = labels_df, aes(label = paste0(\" \", primaryName)), \n            vjust = -1, color = \"black\", size = 4, font = \"bold\") +  # Add labels for the highest points\n  \n  theme_minimal(base_size = 15) +  # Increase font size for better readability\n  theme(\n    plot.background = element_rect(fill = \"darkgray\"), \n    panel.background = element_rect(fill = \"darkgray\"),  \n    axis.line = element_line(color = \"white\", size = 1.2), \n    axis.text = element_text(color = \"white\"),  # Set axis text color to white\n    axis.title = element_text(color = \"white\", face = \"bold\"),  # Bolden axis titles\n    plot.title = element_text(hjust = 0.5, color = \"white\", face = \"bold\"),  # Center the title and bold it\n    axis.text.x = element_text(angle = 45, hjust = 1)  # Rotate x-axis labels if needed\n  )\n\n\n\n\n\n\n\n\n\nMOST_POPULAR_DIRECTORS\n\n# A tibble: 3,254 × 10\n   nconst    primaryName     age primaryTitle  year mainGenre avgMainMovieRating\n   &lt;chr&gt;     &lt;chr&gt;         &lt;dbl&gt; &lt;chr&gt;        &lt;dbl&gt; &lt;chr&gt;                  &lt;dbl&gt;\n 1 nm1218281 Jon Watts        43 Spider-Man:…  2021 Action                   8.2\n 2 nm0001282 Tony Goldwyn     64 Oppenheimer   2023 Drama                    8.3\n 3 nm1347153 Tyler Perry      55 Don't Look …  2021 Drama                    7.2\n 4 nm0411539 Puneet Issar     65 The Kashmir…  2022 Drama                    8.6\n 5 nm0426059 Rian Johnson     51 Glass Onion   2022 Drama                    7.1\n 6 nm0781913 Noah Segan       41 Glass Onion   2022 Drama                    7.1\n 7 nm3725055 Jessica Henw…    NA Glass Onion   2022 Drama                    7.1\n 8 nm0072600 Ned Benson       47 Black Widow   2021 Action                   6.6\n 9 nm0075244 Gabriel Beri…    75 Black Widow   2021 Action                   6.6\n10 nm0795153 Cate Shortla…    56 Black Widow   2021 Action                   6.6\n# ℹ 3,244 more rows\n# ℹ 3 more variables: numVotes &lt;dbl&gt;, filmCount &lt;int&gt;, avgDirectorRating &lt;dbl&gt;\n\n# Rian Johnson\n\n\nMOST_POPULAR_ACTORS |&gt;\n  filter(filmCount &gt;= 10, mainGenre == \"Action\") |&gt;\n  arrange(desc(avgActorRating)) |&gt;\n  print(n=50) \n\n# A tibble: 62 × 10\n   nconst     primaryName    age primaryTitle  year mainGenre avgMainMovieRating\n   &lt;chr&gt;      &lt;chr&gt;        &lt;dbl&gt; &lt;chr&gt;        &lt;dbl&gt; &lt;chr&gt;                  &lt;dbl&gt;\n 1 nm2128363  Paul Briggs     50 Raya and th…  2021 Action                   7.3\n 2 nm4514080  Bradley Cam…    NA Psycho-Pass…  2023 Action                   7  \n 3 nm0239504  Bruce DuBose    64 Psycho-Pass…  2023 Action                   7  \n 4 nm3139597  Shawn Gann      43 Psycho-Pass…  2023 Action                   7  \n 5 nm5211370  Justin Brin…    33 Black Clove…  2023 Action                   7.4\n 6 nm2995162  Artt Butler     55 Mortal Komb…  2022 Action                   6.7\n 7 nm0254602  R. Bruce El…    75 Psycho-Pass…  2023 Action                   7  \n 8 nm11111075 A.J. Beckles    26 Mobile Suit…  2024 Action                   6.8\n 9 nm0000316  Mel Brooks      98 Paws of Fur…  2022 Action                   5.7\n10 nm2616557  Ray Chase       37 Demon Slaye…  2023 Action                   7.6\n11 nm0954900  Zeno Robins…    31 Mobile Suit…  2024 Action                   6.8\n12 nm13506312 Alex Hom        NA New Gods: Y…  2022 Action                   6.6\n13 nm0136482  Lorne Cardi…    60 Four Souls …  2023 Action                   7.2\n14 nm6770060  Bill Butts      38 Pokémon the…  2020 Action                   6.4\n15 nm3739133  Bayardo De …    NA Mortal Komb…  2021 Action                   6.5\n16 nm0089707  Steve Blum      64 Black Clove…  2023 Action                   7.4\n17 nm0564402  Simon McBur…    67 Wolfwalkers   2020 Action                   8  \n18 nm6981965  Kellen Goff     NA Pokémon the…  2020 Action                   6.4\n19 nm0196654  Daniel Dae …    NA Raya and th…  2021 Action                   7.3\n20 nm0443632  Thierry Kaz…    NA Miraculous:…  2023 Action                   6.1\n21 nm0005458  Jason Stath…    57 Fast X        2023 Action                   5.7\n22 nm0010075  Jensen Ackl…    46 Batman: The…  2021 Action                   7.2\n23 nm0010075  Jensen Ackl…    46 Batman: The…  2021 Action                   7.2\n24 nm8188622  Jacob Batal…    28 Spider-Man:…  2021 Action                   8.2\n25 nm0224007  John DiMagg…    56 Batman: The…  2021 Action                   7.2\n26 nm1716941  Martial Le …    NA Miraculous:…  2023 Action                   6.1\n27 nm0541902  Aasif Mandvi    58 Paws of Fur…  2022 Action                   5.7\n28 nm1977856  Chin Han        55 Mortal Komb…  2021 Action                   6  \n29 nm3112453  Mohammed Am…    43 Black Adam    2022 Action                   6.2\n30 nm1684869  Troy Baker      48 Batman: The…  2021 Action                   7.2\n31 nm1684869  Troy Baker      48 Batman: The…  2021 Action                   7.2\n32 nm0071680  Clé Bennett     NA Four Souls …  2023 Action                   7.2\n33 nm2642131  Zach Callis…    27 Batman: The…  2021 Action                   7.2\n34 nm0235960  Robin Atkin…    48 Mortal Komb…  2021 Action                   6.5\n35 nm2022559  Dave B. Mit…    55 Mortal Komb…  2021 Action                   6.5\n36 nm0862916  Tommy Tiern…    55 Wolfwalkers   2020 Action                   8  \n37 nm0000408  Jonathan Fr…    72 Catwoman: H…  2022 Action                   5.6\n38 nm4464492  Dakota Daul…    NA The Last Vi…  2021 Action                   5  \n39 nm2941559  Ike Amadi       NA Mortal Komb…  2021 Action                   6.5\n40 nm0000439  Neil Patric…    51 The Matrix …  2021 Action                   5.6\n41 nm0146097  James Carte…    70 Pokémon the…  2020 Action                   6.4\n42 nm6299248  Bowen Yang      34 The Tiger's…  2024 Action                   5.7\n43 nm0570364  Joel McHale     53 Mortal Komb…  2021 Action                   6.5\n44 nm0022771  Steve Alter…    61 Trollhunter…  2021 Action                   6.6\n45 nm0273159  Alex Ferns      56 Godzilla x …  2024 Action                   6.1\n46 nm1189034  Bharat Dabh…    55 Ek Villain …  2022 Action                   4.4\n47 nm1167985  Lewis Tan       NA Mortal Komb…  2021 Action                   6  \n48 nm1282966  O-T Fagbenle    43 Black Widow   2021 Action                   6.6\n49 nm0152059  Vic Chao        NA Trollhunter…  2021 Action                   6.6\n50 nm0389491  Bosco Hogan     75 The Legion    2020 Action                   3.2\n# ℹ 12 more rows\n# ℹ 3 more variables: numVotes &lt;dbl&gt;, filmCount &lt;int&gt;, avgActorRating &lt;dbl&gt;\n\n# Jacob Batalon and John DiMaggio\nMOST_POPULAR_ACTORS |&gt;\n  filter(primaryName %in% c(\"Jacob Batalon\",\"John DiMaggio\"))\n\n# A tibble: 2 × 10\n  nconst    primaryName     age primaryTitle   year mainGenre avgMainMovieRating\n  &lt;chr&gt;     &lt;chr&gt;         &lt;dbl&gt; &lt;chr&gt;         &lt;dbl&gt; &lt;chr&gt;                  &lt;dbl&gt;\n1 nm8188622 Jacob Batalon    28 Spider-Man: …  2021 Action                   8.2\n2 nm0224007 John DiMaggio    56 Batman: The …  2021 Action                   7.2\n# ℹ 3 more variables: numVotes &lt;dbl&gt;, filmCount &lt;int&gt;, avgActorRating &lt;dbl&gt;\n\nFILTERED_MOVIES |&gt;\n  filter(year &lt;= 1998, grepl(\"action\",genres,ignore.case=TRUE)) |&gt;\n  arrange(desc(numVotes)) |&gt;\n  unique() |&gt;\n  print(n=30)\n\n# A tibble: 2,120 × 9\n# Groups:   tconst [2,120]\n   tconst    title        year metric avgRating numVotes decade castCount genres\n   &lt;chr&gt;     &lt;chr&gt;       &lt;dbl&gt;  &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;  &lt;dbl&gt;     &lt;int&gt; &lt;chr&gt; \n 1 tt0076759 Star Wars:…  1977    0.8       8.6  1474565   1970        24 Action\n 2 tt0080684 Star Wars:…  1980    0.8       8.7  1405682   1980        24 Action\n 3 tt0110413 Léon: The …  1994    1         8.5  1269895   1990        17 Actio…\n 4 tt0103064 Terminator…  1991    0.8       8.6  1198273   1990        22 Action\n 5 tt0086190 Star Wars:…  1983    0.8       8.3  1140230   1980        23 Action\n 6 tt0107290 Jurassic P…  1993    0.8       8.2  1089588   1990        21 Action\n 7 tt0082971 Raiders of…  1981    0.8       8.4  1051637   1980        23 Action\n 8 tt0095016 Die Hard     1988    0.8       8.2   960964   1980        22 Actio…\n 9 tt0088247 The Termin…  1984    0.8       8.1   942692   1980        19 Action\n10 tt0083658 Blade Runn…  1982    1         8.1   836437   1980        22 Actio…\n11 tt0097576 Indiana Jo…  1989    0.8       8.2   822476   1980        24 Action\n12 tt0090605 Aliens       1986    0.8       8.4   787505   1980        20 Action\n13 tt0113277 Heat         1995    0.6       8.3   733993   1990        22 Actio…\n14 tt0116629 Independen…  1996    0.8       7     616858   1990        20 Action\n15 tt0087469 Indiana Jo…  1984    0.8       7.5   542540   1980        23 Action\n16 tt0119116 The Fifth …  1997    0.8       7.6   515969   1990        19 Action\n17 tt0092099 Top Gun      1986    1         6.9   513973   1980        22 Actio…\n18 tt0117060 Mission: I…  1996    0.8       7.2   478193   1990        22 Actio…\n19 tt0119567 The Lost W…  1997    0.8       6.6   450702   1990        21 Action\n20 tt0119698 Princess M…  1997    0.8       8.3   444550   1990        29 Action\n21 tt0112864 Die Hard w…  1995    0.8       7.6   413230   1990        20 Actio…\n22 tt0096895 Batman       1989    0.8       7.5   411928   1980        23 Action\n23 tt0119094 Face/Off     1997    0.8       7.3   407477   1990        23 Action\n24 tt0111257 Speed        1994    0.8       7.3   399472   1990        19 Actio…\n25 tt0099423 Die Hard 2   1990    0.8       7.1   387990   1990        24 Actio…\n26 tt0117500 The Rock     1996    0.8       7.4   363620   1990        23 Actio…\n27 tt0100802 Total Reca…  1990    0.8       7.5   360446   1990        25 Action\n28 tt0103776 Batman Ret…  1992    0.8       7.1   333509   1990        24 Action\n29 tt0120201 Starship T…  1997    0.8       7.3   328003   1990        22 Action\n30 tt0106977 The Fugiti…  1993    1         7.8   325363   1990        24 Actio…\n# ℹ 2,090 more rows\n\n# Independence Day\n\nSo, we get to the end of the data exploration. Lots of combining, filtering, and more. But we think these three will create quite the film!"
  }
]